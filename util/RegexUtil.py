import re

from pdjus.conexao.ExtensaoPeewee import Singleton


class RegexUtil(metaclass=Singleton):
    '''
        classe estática que irá conter regexes úteis ao projeto como um todo, de forma que poderão ser facilmente reaproveitadas e melhor testadas
        '''

    #### expressao regular para identificacao de NPUs dos TRFs
    npu_trfs = '(\\b\d{1,7}[\-\s]*?\d{2}\.?(19|20)\d{2}\.?[48]\.?\d{2}\.?\d{4}\\b)'

    # formato: NNNNNNN-DD.AAAA.J.TR.OOOO
    # NNNNNNN - Número sequencial do processo
    # DD - Dígito Verificador
    # AAAA - Ano de ajuizamento
    # J - Órgão do Poder Judiciário (4 para Justiça Federal)
    # TR - Região (TRF1 é 01)
    # OOOO - Origem no primeiro grau(Seção e Subseção Judiciária

    # (19|20)\d{2} garante anos entre 1900 e 2099
    # [48] garante justiça federal ou estadual
    # \\b : garante que não serão capturados padrões inseridos em sequencias de números maiores do que o esperado
    # \d{1,7} : permite que sejam capturados npus sem 0s preenchidos a esquerda
    # -? : traços e pontos são opcionais
    # \d{2} : dígito verificador
    # \d{4} : ano
    # 4 : força esta regex a capturar somente Justiça Federal
    # 0[1-5] : permite capturar cada um dos 5 TRFs
    # \d{4} : captura a seção e subseção judiciária
    # | : logic OR
    # segunda parte da regex também captura NPUs porém sem flexibilidade de não encontrar pontos e traços,
    # sendo possível, entretanto, capturar NPUs de quaisquer órgão do poder judiciário

    #################################################################################################################
    #REGEX PARA QUADRO DE CREDORES:
    regex_quadro_prioritario = 'APRESENT(ARAM|OU) O SEGUINTE (LISTA|QUADRO|RELACAO|ROL) (NOMINAL )?DE CREDORES|FOI REQUERIDA A PUBLICACAO DA RELACAO DE CREDORES|FOI APRESENTADA PELA ADMINISTRADORA JUDICIAL.{0,100}A RELACAO DE CREDORES|SEGUE ABAIXO RELACAO NOMINAL|APRESENTOU O QUADRO GERAL ABAIXO|SERVE O PRESENTE EDITAL PARA DAR PUBLICIDADE A RELACAO NOMINAL DE CREDORES|(LISTA|QUADRO|RELACAO|ROL) (NOMINAL |NOMINATIVA )?D(E|OS) CREDORES:'
    regex_quadro_artigo = '((ART(\.|IGO))\s(52|7|96|102)\D|(EDITAL\s)?\\b(QGC|ROL|LISTA|QUADRO|RELACAO|EDITAL(\sDE\sCONVOCACAO)?)\s(GERAL)?\s?.{0,50}D(OS|E)\sCREDOR(ES)?|FORAM RECONHECIDOS PEL[AO] (ADM(|\.|INISTRADORA?) JUDICIAL|SINDICO) OS SEGUINTES CREDITOS|QGC|RELACAO CONSOLIDADA).{0,600}(CLASSE|QUIROGRA\w*|TRABALHIST\w*|TRIBUT\w*|GARANTIA\sREAL|\$)'
    regex_quadro_artigo_para_sql = '((ART(\.|IGO))\s(52|7|96|102)\D|(EDITAL\s)?\\b(QGC|ROL|LISTA|QUADRO|RELACAO|EDITAL(\sDE\sCONVOCACAO)?)\s(GERAL)?\s?.{0,50}D(OS|E)\sCREDOR(ES)?|FORAM RECONHECIDOS PEL[AO] (ADM(|\.|INISTRADORA?) JUDICIAL|SINDICO) OS SEGUINTES CREDITOS|QGC|RELACAO CONSOLIDADA).*?(CLASSE|QUIROGRA\w*|TRABALHIST\w*|TRIBUT\w*|GARANTIA\sREAL|\$)'
    regex_moedas = 'BRL|USD|R\$|US\$|U\$|EUR|£|GBP|€|¥|JPY|CLP|CHF|NOK|SEK'
    regex_quadro_excluir_encerramento = '(ENCERRAMENTO|DECRETA[ÇC][AÃ]O)\s+D[AE]\s+FAL[ÊE]NCIA'
    regex_quadro_indicacao_relacao = 'RELA[ÇC][ÃA]O\sD[OEA]S?\sCREDOR(ES)?\sAPRESENTAD'
    regex_anti_quadro = '(((?<!\\bCONSTA )(JULG(O|ASE)|DECIDO) (IMPROCEDENTE|PROCEDENTE|EXTINTO) O (PEDIDO|PROCESSO))|((O JULGAMENTO|REJEIT(OU(SE)?)|APRESENT(ARAM|OU)) (D?A )?IMPUGNACAO)|SEGUINTES? PETIC(OES|AO) DE HABILITACAO\s*(E\s*)?IMPUGNACAO DE CREDITO|(SE PRETENDE IMPUGNAR ES[ST]E CREDITO)|(APRESENTADA (UMA )?(IMPUGNACAO|HABILITACAO) DE CREDITO)|(ANALISE E ELABORACAO)|(DETERMIN(O|ANDO) A (INCLUSAO|CORRECAO) DO (VALOR DO )?CREDITO)|(PEDE A INCLUSAO COMO)|(ALEGANDO SER CREDOR)|(INCLU(ISE|SAO|A|O) (DO)? CREDITO)|(PROVIDENCI(E|AR|OU) O RECOLHIMENTO)|(EXPEDICAO D[OE] MANDADO)|(EXECUCAO EMBARGADA)|(CONSIDERO PREJUDICADO)|(DEVERAO? SER (INCLUIDOS|CONSIDERADOS).{0,100}D(E|OS) CREDORES)|(INCLUSAO .{0,100} QUADRO (GERAL )?DE CREDORES)|(AGUARD(A ?SE|O) A PUBLICACAO DO EDITAL)|(DEVERA .{0,50}HABILITAR O (SEU )?CREDITO)|(CASO HAJA INTERESSE EM CONSTAR [DN]O QUADRO GERAL D(E|OS) CREDORES)|((REPUBLIQUE ?SE (O )?|PUBLIQUE ?SE ((O )?NOV|A RETIFICACAO )|ALTERESE |DEVERA ELABORAR [OA] NOV)D?[OA] (RELACAO|QUADRO( GERAL)?|LISTA) D[EO]S? CREDORES)|(VALOR RELATIVO AS?( CUSTAS DE)? PUBLICACAO)|(DEVERA CONTER .{0,50} RELACAO( NOMINAL)? DE CREDORES)|(CADA CARACTERE CONTIDO NO TEXTO (QUE SERA IMPRESSO )?[DN]O EDITAL)|((QUE DEVERA|A) SER RECOLHID[AO] POR GUIA)|(CUSTO DO EDITAL)|(AGUARD(ASE|O|ANDO) (PEL[OA] REQUERENTE )?A APRESENTACAO (DA MINUTA )?DO EDITAL)|(PEDIDO DE PENHORA)|(ELABORE (QGC|ROL|LISTA|QUADRO|RELACAO|EDITAL(\sDE\sCONVOCACAO)?)( GERAL DE CREDORES)? ATUALIZADO)|(ARBITRAMENTO DOS HONORARIOS DO (SINDICO|ADMINISTRADOR JUDICIAL) EM)|(OS BENS FORAM AVALIADOS EM)|(HOMOLOGO A VENDA)|(DEFIRO A (ENTREGA DOS BENS|EXPEDICAO D[OAE] ALVARA))|(RECEBIMENTO.{0,15} HABILITACAO DE CREDITO)|(DEPOSITO JUDICIAL (REALIZADO POR|NO VALOR DE))|((QUADRO GERAL DE CREDORES|QGC) (DEVIDAMENTE|DEVERA SER) RETIFICADO)|(DEVERA (O AUTOR |SER )?RECOLH(ER|IDA) (NO PRAZO DE \w+ DIAS |A TAXA ((DO )?EDITAL)? )?N?O VALOR)|(SOLICITOU QUE [OA] HABILITANTE)|(QUE (SE )?AGUARDE A PUBLICACAO DO EDITAL PREVISTO ([ND]OS? )?ARTIGOS? 7O ?2O)|(HOMOLOGO OS HONORARIOS)|((INDEFIRO A|NAO HA (A )?NECESSIDADE D[EA]) (RE)?PUBLICACAO DO QUADRO GERAL DE CREDORES)|((IN)?DEFIRO A INDICACAO D[EAO].{0,100}PELO VALOR DE.{0,30}HONORARIOS)|(CUSTO DE PUBLICACAO DO EDITAL REFERENTE A RELACAO DE CREDORES ARTIGO 7 ?2)|(NOMEIO PERITO CONTABIL)|((ARBITRO|DEFINO) (A REMUNERACAO|OS HONORARIOS) D[OA] SINDIC[OA])|(AGUARDANDO PUBLICACAO DE EDITAL DE CONVOCACAO DE CREDORES)|(POR CESSAO DE CREDITO ALTERANDO ?SE (POR CONSEQUENCIA )?OS CREDORES)|(CREDITO JA CONSTA [ND]O QUADRO GERAL DE CREDORES)|(JUNTADA AOS AUTOS DE (HABILITACAO|IMPUGNACAO) DE CREDITO)|(A PRESENTE IMPUGNACAO DE CREDITO)|(SINDICO DECLINOU D?O CARGO)|(TRATASE DE PENHORA)|((?<!\\bEXCETO )A REMUNERACAO DO SINDICO)|(PUBLIQUESE.{0,100}PLANO DE RECUPERACAO)|(HABILITADO NO QUADRO)|(DEFIRO O LEVANTAMENTO)|((SE(R|JAM?)|FICA\w*|IMPUGNA\w*) EXCLUI\w* D?O (QUADRO|CREDITO))|(APRESENTAR QUADRO GERAL DOS CREDORES EM PECA AUTONOMA)|(CREDITO POR EL[EA] )|(CAPACIDADE DE PAGAMENTO D[AO] DEVEDORA?)|(HOMOLOGO A)|(CONVOCACAO DA ASSEMBLEIA)|(PARA RECOLHIMENTO DAS CUSTAS)|(FISCALIZACAO DAS ATIVIDADES)|(DECLARO ABERTA.{0,30}FALENCIA)|(DE[FC]I[RD]O.{0,50}PLANO DE RECUPERACAO)|(APRESENTE A MINUTA DO EDITAL EM FORMATO TEXTO (DE )?DIRETAMENTE AO CARTORIO)|(SINDIC[AO] APRESENTOU.{0,50}RELATORIO)|(EXCLUSAO DO CREDITO))'
    # A PARTE DE EXCETO A REMUNERACAO DO SINDICO DEVE FICAR FORA DO SQL!
    regex_anti_quadro_para_sql = '(((JULG(O|ASE)|DECIDO) (IMPROCEDENTE|PROCEDENTE|EXTINTO) O (PEDIDO|PROCESSO))|((O JULGAMENTO|REJEIT(OU(SE)?)|APRESENT(ARAM|OU)) (D?A )?IMPUGNACAO)|SEGUINTES? PETIC(OES|AO) DE HABILITACAO\s*(E\s*)?IMPUGNACAO DE CREDITO|(SE PRETENDE IMPUGNAR ES[ST]E CREDITO)|(APRESENTADA (UMA )?(IMPUGNACAO|HABILITACAO) DE CREDITO)|(ANALISE E ELABORACAO)|(DETERMIN(O|ANDO) A (INCLUSAO|CORRECAO) DO (VALOR DO )?CREDITO)|(PEDE A INCLUSAO COMO)|(ALEGANDO SER CREDOR)|(INCLU(ISE|SAO|A|O) (DO)? CREDITO)|(PROVIDENCI(E|AR|OU) O RECOLHIMENTO)|(EXPEDICAO D[OE] MANDADO)|(EXECUCAO EMBARGADA)|(CONSIDERO PREJUDICADO)|(DEVERAO? SER (INCLUIDOS|CONSIDERADOS).{0,100}D(E|OS) CREDORES)|(INCLUSAO .{0,100} QUADRO (GERAL )?DE CREDORES)|(AGUARD(A ?SE|O) A PUBLICACAO DO EDITAL)|(DEVERA .{0,50}HABILITAR O (SEU )?CREDITO)|(CASO HAJA INTERESSE EM CONSTAR [DN]O QUADRO GERAL D(E|OS) CREDORES)|((REPUBLIQUE ?SE (O )?|PUBLIQUE ?SE ((O )?NOV|A RETIFICACAO )|ALTERESE |DEVERA ELABORAR [OA] NOV)D?[OA] (RELACAO|QUADRO( GERAL)?|LISTA) D[EO]S? CREDORES)|(VALOR RELATIVO AS?( CUSTAS DE)? PUBLICACAO)|(DEVERA CONTER .{0,50} RELACAO( NOMINAL)? DE CREDORES)|(CADA CARACTERE CONTIDO NO TEXTO (QUE SERA IMPRESSO )?[DN]O EDITAL)|((QUE DEVERA|A) SER RECOLHID[AO] POR GUIA)|(CUSTO DO EDITAL)|(AGUARD(ASE|O|ANDO) (PEL[OA] REQUERENTE )?A APRESENTACAO (DA MINUTA )?DO EDITAL)|(PEDIDO DE PENHORA)|(ELABORE (QGC|ROL|LISTA|QUADRO|RELACAO|EDITAL(\sDE\sCONVOCACAO)?)( GERAL DE CREDORES)? ATUALIZADO)|(ARBITRAMENTO DOS HONORARIOS DO (SINDICO|ADMINISTRADOR JUDICIAL) EM)|(OS BENS FORAM AVALIADOS EM)|(HOMOLOGO A VENDA)|(DEFIRO A (ENTREGA DOS BENS|EXPEDICAO D[OAE] ALVARA))|(RECEBIMENTO.{0,15} HABILITACAO DE CREDITO)|(DEPOSITO JUDICIAL (REALIZADO POR|NO VALOR DE))|((QUADRO GERAL DE CREDORES|QGC) (DEVIDAMENTE|DEVERA SER) RETIFICADO)|(DEVERA (O AUTOR |SER )?RECOLH(ER|IDA) (NO PRAZO DE \w+ DIAS |A TAXA ((DO )?EDITAL)? )?N?O VALOR)|(SOLICITOU QUE [OA] HABILITANTE)|(QUE (SE )?AGUARDE A PUBLICACAO DO EDITAL PREVISTO ([ND]OS? )?ARTIGOS? 7O ?2O)|(HOMOLOGO OS HONORARIOS)|((INDEFIRO A|NAO HA (A )?NECESSIDADE D[EA]) (RE)?PUBLICACAO DO QUADRO GERAL DE CREDORES)|((IN)?DEFIRO A INDICACAO D[EAO].{0,100}PELO VALOR DE.{0,30}HONORARIOS)|(CUSTO DE PUBLICACAO DO EDITAL REFERENTE A RELACAO DE CREDORES ARTIGO 7 ?2)|(NOMEIO PERITO CONTABIL)|((ARBITRO|DEFINO) (A REMUNERACAO|OS HONORARIOS) D[OA] SINDIC[OA])|(AGUARDANDO PUBLICACAO DE EDITAL DE CONVOCACAO DE CREDORES)|(POR CESSAO DE CREDITO ALTERANDO ?SE (POR CONSEQUENCIA )?OS CREDORES)|(CREDITO JA CONSTA [ND]O QUADRO GERAL DE CREDORES)|(JUNTADA AOS AUTOS DE (HABILITACAO|IMPUGNACAO) DE CREDITO)|(A PRESENTE IMPUGNACAO DE CREDITO)|(SINDICO DECLINOU D?O CARGO)|(TRATASE DE PENHORA)|(PUBLIQUESE.{0,100}PLANO DE RECUPERACAO)|(HABILITADO NO QUADRO)|(DEFIRO O LEVANTAMENTO)|((SE(R|JAM?)|FICA\w*|IMPUGNA\w*) EXCLUI\w* D?O (QUADRO|CREDITO))|(APRESENTAR QUADRO GERAL DOS CREDORES EM PECA AUTONOMA)|(MANIFESTACAO D[AO] (SINDIC[AO]|ADMINISTRADORA? JUDICIAL))|(CREDITO POR EL[EA] )|(HOMOLOGO A)|(CONVOCACAO DA ASSEMBLEIA)|(PARA RECOLHIMENTO DAS CUSTAS)|(FISCALIZACAO DAS ATIVIDADES)|(DECLARO ABERTA.{0,30}FALENCIA)|(DE[FC]I[RD]O.{0,50}PLANO DE RECUPERACAO)|(APRESENTE A MINUTA DO EDITAL EM FORMATO TEXTO (DE )?DIRETAMENTE AO CARTORIO)|(SINDIC[AO] APRESENTOU.{0,50}RELATORIO)|(EXCLUSAO DO CREDITO))'
    #################################################################################################################

    #################################################################################################################
    # REGEX PARA HABILITAÇÃO DE CRÉDITO:
    # FICAR ATENTO: QUALQUER MODIFICACAO NOS REGEX TEM QUE ALTERAR O VALOR DOS GRUPOS NA CLASSIFICACAO
    #DEFERIDOS:
    regex_habilitacao_deferidos_padrao1 = '(VALOR|IMPORT(E|ANCIA)|SOMA|QUANTIA|MONTA(NTE)?)? *(NOMINAL)? *(RESPECTIV[AO])? *(DE)? *(CR\$|CZ\$|NCZ\$|CR\$|NCR\$|R\$|US\$|USD|EUR|€|¥|£|\$)[\.,: ]*([\d\.\,]+) *(\(.{1,150}\))?\,? *(PELA|COMO|NA|DE)? *((CATEGORIA|CLASSE|NATUREZA|CONDICAO|(CLASSIFICAD[AO]S? COMO)))? *(D(E|[AO]S))? *(CRED(OR|ITOS?))? *(CONCURSA(L|IS))? *((PRIVILEGIAD[AO]S?)? *(PREFERENCIA(L|IS))? *(TRABALHISTAS?|(SUB\-?)?QUIROGRAFARI[OA]S? *(SUBORDINAD[AO])?|RETARDATARI[OA]S?|PREFERENCIA(L|IS)|FISCA(L|IS)|GERA(L|IS)|ESPECIA(L|IS)|TRIBUTARI[OA]S?|TRIBUTO|EXTRA\-?CONCURSA(L|IS)|( IV )|( III )|( II )|( I )|(MULTA E JUROS DE MORA)|((COM)? *(GARANTIAS? *REA(L|IS)))))'
    regex_habilitacao_deferidos_padrao2 = '((PRIVILEGIAD[AO]S?)? *(PREFERENCIA(L|IS))? *(TRABALHISTAS?|(SUB\-?)?QUIROGRAFARI[OA]S? *(SUBORDINAD[AO])?|RETARDATARI[OA]S?|PREFERENCIA(L|IS)|FISCA(L|IS)|GERA(L|IS)|ESPECIA(L|IS)|TRIBUTARI[OA]S?|TRIBUTO|EXTRA\-?CONCURSA(L|IS)|( IV )|( III )|( II )|( I )|(MULTA E JUROS DE MORA)|((COM)? *(GARANTIAS? *REA(L|IS))))) *(EM SEU FAVOR)? *\,? *(A|PEL[OA]|N[OA]|EM|D[EA])? *(VALOR|IMPORT(E|ANCIA)|SOMA|QUANTIA|MONTA(NTE)?)? *(NOMINAL)? *(RESPECTIV[AO])? *(DE)? *(CR\$|CZ\$|NCZ\$|CR\$|NCR\$|R\$|US\$|USD|EUR|€|¥|£|\$)[\.,: ]*([\d\.\,]+) *(\(.{1,150}\))?\,? *'
    regex_habilitacao_deferidos_padrao3 =  'JULG(AR|O) HABILITADO ?(NA FALENCIA DE)? *.{1,80} ?((COMO|(NA QUALIDADE DE)) CREDOR)? ?((PRIVILEGIAD[AO]S?)? ?(PREFERENCIA(L|IS))? ?(TRABALHISTAS?|(SUB\-?)?QUIROGRAFARI[OA]S? *(SUBORDINAD[AO])?|RETARDATARI[OA]S?|PREFERENCIA(L|IS)|FISCA(L|IS)|GERA(L|IS)|ESPECIA(L|IS)|TRIBUTARI[OA]S?|TRIBUTO|EXTRA\-?CONCURSA(L|IS)|( IV )|( III )|( II )|( I )|(MULTA E JUROS DE MORA)|((COM)? ?(GARANTIAS? ?REA(L|IS))))) ?(EM SEU FAVOR)? ?\,? ?(A|PEL[OA]|N[OA]|EM|D[EA])? ?(VALOR|IMPORT(E|ANCIA)|SOMA|QUANTIA|MONTA(NTE)?)? ?(NOMINAL)? ?(RESPECTIV[AO])? ?(DE)? ?(CR\$|CZ\$|NCZ\$|CR\$|NCR\$|R\$|US\$|USD|EUR|€|¥|£|\$)[\.,: ]*([\d\.\,]+) *(\(.{1,150}\))?\,?'

    #INDEFERIDOS:
    regex_habilitacao_indeferidos_padrao1 = '((INDEFIRO [OA] *(PETICAO|PEDIDO|PLEITO)? *INICIAL)(.*) *((PARA)?)? * *JULG(AR|O) EXTINTO)|(INDEFIRO|(JULGO IMPROCEDENTE)) *[OA] *(PRESENTE)? *(PEDIDO *D[EOA])? *((HABILITACAO|IMPUGNACAO|INCLUSAO) *(D[OE] *(SEU) *CREDITO)?) *\,? *'
    regex_habilitacao_indeferidos_padrao2 = '((JULGO|DETERMINO) *A? *EXTIN(TO|CAO) D?O (FEITO|PROCESSO) COM (FULCRO|BASE|FUNDAMENTO) NO ART\.?(IGO)? *267)'
    regex_habilitacao_indeferidos_padrao3 = ' *HOMOLOG[OA] *A? *(DESISTENCIA|RENUNCIA) *'
    regex_habilitacao_indeferidos_padrao4 = '(INDEFIRO|(JULGO IMPROCEDENTE)|(SEM (RESOLUCAO D[EO])? *MERITO)|ART\.?(IGO)? *267)'
    regex_habilitacao_indeferidos_padrao5 = '(INDEFIRO [OA] *(PETICAO|PEDIDO|PLEITO)? *INICIAL)'

    #TIPO_MOVIMENTO_INDEFERIDOS:
    regex_habilitacao_indeferidos_tp_mov = 'EXTIN(.*)267|(SEM RESOLUCAO DO MERITO)|(INDEFERIDA A *(PETICAO) *INICIAL|IMPROCEDENTE|HOMOLOGADA A (RENUNCIA|DESISTENCIA))'

    #################################################################################################################

    ##### expressoes regulares para classificação de sentenças do TRF01 de acordo com o título do arquivo de sentença
    limpa_cabecalho_trf01_1 = '\s*_{70,}.*?E\-CVD\s+[\d\.\/]+'
    limpa_cabecalho_trf01_2 = '\s*_{70,}.*?P.G\.\s+\d+\/\d+\s+'


    # # sentenca extinta sem mérito
    # tp_mov_sent_extincao_sem_res_merito =
    #
    # # sentenca parcialmente procedente
    # tp_mov_sent_parc_proc = 'PARC|PART'
    #
    # # sentenca improcedente
    # tp_mov_sent_improc = 'IMPROC?'
    #
    # # sentenca procedente
    # tp_mov_sent_procedente = 'ACOLHEPEDAUT|PROC|DARPROVIMENTO|PORCEDENTE'
    #
    # # embargos acolhidos
    # tp_mov_emb_acolhidos = 'EMB.*ACOLH'
    #
    # # embargos rejeitados
    # tp_mov_emb_rejeitados = 'EMB.*(REJ|IMPROV|IMPROC)|NEGA.*EMB'

    ###### expressoes regulares para classificacao de SENTENCAS do TRF01 de acordo com o texto contido no documento

    txt_mov_sentenca = {
        'sem_merito': '(?<!QUE DEVERIA SER )(?<!NAO HA QUE FALAR EM EXTINCAO DO )(?<!NAO HA QUE FALAR EM )(?<!SOB PENA DE )(((DECIDO\s*REJEITAR|REJEITO|INDEFIRO)\s*[OA]\s*(PETICAO\s*|PEDIDO\s*)?INICIAL)|(((REJEITO\s*A\s*ACAO\s*E?|DECRETO|DECLARO|EXPOSTO.{0,250}|DETERMINO|JULG[OA](NDO|R)?|^|PROCESSO)[\s,]*)([AO]\s*)?(FEITO|EXTIN[GTCL]([AO]|AO|UI[R[OA]|UINDO)|ENCERRAD[OA]|RESOLVO)\s*.{1,41}?[OA]?S?\s*(PRESENTE)?S?\s*(PROCESSO\s*)?((SEM\s*(RESOLUC\.?AO|(O\s*)?EXAME|APRECIA(R|CAO)|JULGAMENTO|CONHECIMENTO|ANALISE)\s*(DA\s*QUESTAO\s*)?D?[OE]\sMERITO)|(,?NOS\s*TERMOS\s*DOS?\s*ARTS?\.?\s*(267|330))))|TIPO\sC\s-\sSEM\sRESOLUCAO\sDO\sMERITO|PROLATADA\s*SENTENCA\s*COM\s*INDEFERIMENTO\s*DA\s*PETICAO\s*INICIAL|(DECIDO.{0,20}EXTINGUIR|EXTINGO|(HOMOLOGO|JULGO|ACOLHO|RECONHECO|INDEFIRO)\\b.{0,160}EXTIN[GTCL]([AO]|AO|UI[R[OA]|UINDO))\s*(PARCIALMENTE)?\s*[OA]?S?\s*(PRESENTE)?S?\s*(ACAO|PROCESSO|FEITO)?[,\s]*(SEM\s*A?\s*(RESOLUC\.?AO|(O\s*)?EXAME|APRECIA(R|CAO)|JULGAMENTO|CONHECIMENTO|ANALISE)\s*(DA\s*QUESTAO\s*)?D?[OE]\sMERITO))',
        'parcial_proc': '((JULG[OA]R?\s*,?\s*(EM PARTES?|PARCIALMENTE\s*,?)\s*PROCEDENTE,?|ACOLHO[\s,]*(APENAS\s*)?(EM PARTES?|PARCIALMENTE))\s*.{1,41}?[OA]S?\s*(PRESENTE)?S?\s*(LIDE|DEMANDA|PLEITOS?|PRETENS(OE|AO)|PEDIDO|DEDUZIDA|DENUNCIA|PETIC(AO|OE)|AC(AO|OE))S?)\s*(INICIA(L|IS))?|JULGO\s*PROCEDENTE\s*EM\s*PARTE\s*(O\s*PEDIDO\s*FORMULADO\s*NA\s*INICIAL)?|ACOLHO\s*PARCIALMENTE\s*A\s*PRETENSAO|ANTE\s*O\s*EXPOSTO\s*,?\s*JULGO\s*PARCIALMENTE\s*PROCEDENTE',
        'procedente': 'PEDIDO\s*PROCEDENTE|JULGO\s*PROCEDENTES?.*?(PEDIDO|OS\s*PRESENTES|A\s*MEDIDA|A\s*ACUSACAO)|(JULGO\s*A\s*DEMANDA\s*PROCEDENTE)|((\\bDEFIRO|\\bACOLHO|JULG([OA]R?(\-SE)?|ANDO)\s*PROCEDENTE(\(?S\)?)?)\s*.{1,41}?[OA](\(?S\)?)?\s*(PRESENTE)?S?\s*(LIDE|DEMANDA|PLEITO|PRETENS(OE|AO)\s*PUNITIVA|PEDIDO(\(?S\)?)?|DENUNCIA|PETIC(AO|OE)|AC(AO|OE))S?)\s*(INICIA(L|IS))?|ACOLHO\s*OS?\s*PEDID\s*OS?',
        'acordo': '(CHEGOU-SE\s*AO\s*ACORDO\s*)|(HOMOLOG(O|A(\-SE)?)\\b\.?\s*(POR\s*SENTENCA\s*)?,?\s*.*?([OA]\s*)?(PRESENTE\s*|TODOS\s*OS\s*TERMOS\s*DO\s*)?(ACORDO|TRANSACAO)\s*((FIRMADO)|(CELEBRAD[OA])|FEIT[OA]|ENTABULADO|(A\s*QUE CHEGARAM))?\s*((PEL|ENTRE)?\s*A[S5]\s*PARTES)?)',
        'improc': '(?<!NAO HAJA RAZAO PARA, LIMINARMENTE, )(?<!NAO HA RAZAO PARA )(?<!QUE DEVERIA SER )(?<!NAO HA QUE FALAR EM )(?<!SOB PENA DE )(PEDIDOS?\s*IMPROCEDENTES?|(JULGO\s*AS?\s*DEMANDAS?\s*IMPROCEDENTES?)|((JULG(O|AR)\s*IMPROCEN?DENTES?|REJEIT(O|ANDO)\\b)\s*.{0,41}?[OA](\(?S\)?)?\s*(PRESENTE)?S?\s*(LIDE|DEMANDA|PRETENS(OE|AO)|PE-?\s*DIDOS?|EX-?C?ECAO|DENUNCIA|PETIC(AO|OE)|AC(AO|OE))S?)\s*(INICIA(L|IS))?|(NAO\s*|DES)ACOLHO\s*(OS?\s*PEDID\s*OS?|AS?\s*PRETENS(AO|OES)\s*PUNITIVA)|DECLARO\s*EXTINTAS?\s*AS?\s*PRETENS(AO|OES)\s*PUNITIVA)',
        'emb_parc_acolhidos': '(ACOLHO|DOU)\s*PARCIAL(MENTE)?\s*(PROVIMENTO)?\s*A?OS\s*EMBARGOS|CONHECO\s*OS\s*EMBARGOS.{1,50}?PARCIAL\s*PROVIMENTO|(\\bDEFIRO|\\bACOLHO|JULG([OA]R?(\-SE)?|ANDO))\s*(PARCIAL|EM\s*PARTE).{0,100}EMBARGOS?|EMBARGOS.{0,100}(D(AR|OU)-?LHES?\s*(PARCIAL\s*PROVIMENTO|PROVIMENTO\s*PARCIAL)|NO\s*MERITO,?\s*(PARCIALMENTE|EM\s*PARTE)\s*(OS\s*ACOLHO|ACOLHO-?OS)|(OS\s*ACOLHO|ACOLHO-?OS)\s*(EM\s*PARTE|PARCIALMENTE))',
        'emb_acolhidos': 'DOU\s*PROVIMENTO\s*AOS\s*EMBARGOS|CONHECO\s*D?OS\s*EMBARGOS.{1,50}?(?<!NAO\sLHES\s)DOU\s*PROVIMENTO(?!\s*(EM\s*PARTE|(APENAS\s*)?PARCIAL(MENTE)?))|(\\bDEFIRO|\\bCONHECO|DECIDO.{1,3}RECEBO|\\bACOLHO|JULG([OA]R?(\-?SE)?|ANDO))\s*(PROCEDENTE)?\s*D?OS?\s*(PRESENTES)?\s*EMBARGOS?|EMBARGOS.{0,100}(?<!DEIXO\sDE\s)(D(AR|OU)-?LHES?\s*PROVIMENTO(?!\s*(EM\s*PARTE|(APENAS\s*)?PARCIAL(MENTE)?))|NO\s*MERITO,?\s*(OS\s*ACOLHO|ACOLHO[\-\s]*OS))(?!\s*(EM\s*PARTE|(APENAS\s*)?PARCIAL(MENTE)?))',
        'emb_rejeit': '(DESCABE\s*O\s*MANEJO\s*DOS?\s*RECURSOS?|REJEITO|NEGO\s*PROVIMENTO\s*)(A?OS?\s*|DE\s*)(PRESENTES?)?\s*(EMBARGOS|O?\s*RECURSO)\s*|(JULG[OA]R?\s*IMPROCEN?DENTES?|REJEIT(O|ANDO))\\b\s*.{1,41}?[OA](\(?S\)?)?\s*(PRESENTE)?S?\s*EMBARGOS|EMBARGOS.{0,300}((NEG(O|AR|ANDO)-?LHES|LHES\s*NEGO\s*)\s*PROVIMENTO|REJEITO\s*OS?\s*(REFERIDOS?\s*)?RECURSOS?|PARA\s*REJEITA-?LOS?|NO\s*MERITO\s*(OS\s*REJEITO|REJEITO-?OS)|DEIXO\s*DE\s*DAR-LHES\s*PROVIMENTO)|(NAO\s*CONHECO\s*(D[OA]S?\s*(EMBARGOS?|RECURSOS?|IMPUGNACAO|PRESENTE\s*EXCECAO|PEDIDOS?|DECLARATORIOS?|AGRAVO)|E\s*N[EA][OM]\s*DOU\s*PROVIMENTO))',
        'prescricao': '(?<!NAO\s)((PRONUNCIO|DECIDO\s*RECONHECER)\s*A\s*PRESCRICAO|RECONHECE-?SE\s*COMO\s*PRESCRITA|COM\s*JULGAMENTO\s*DO\s*MERITO.{0,150}OCORRENCIA\s*DA\s*PRESCRICAO|DECRETO\s*A\s*EXTINCAO\s*DO\s*PROCESSO\s*DIANTE\s*DA\s*PRESCRICAO|(COM|NOS)? *(BASE|FULCRO|FUNDAMENTO|TERMOS)? *(NOS TERMOS)? *([DN][OA])? *(ART\.?(IGO)? *269\,? *INC\.?(ISO)? *(IV|4)))',
        'extincao': '(JULGO|DECLAR[OA]([\- ]?SE)?|DECRETO|DETERMINO) *[OA]? *(ENCERRA(D[OA]|MENTO)|EXTIN(T[OA]|CAO))\s*D?[OA]\s+(PRESENTE)?\s*(?!INSTRUCAO)(PROCESSO)?|EXTINGO\s*[AO]\s*(PRESENTE)?\s*(EXECUCAO|PROCESSO)'
    }

    # REGEX DO SAMY txt_mov_sem_merito = '(JULG[OA]R?\s*(EXTINT[OA]|ENCERRAD[OA])\s*.{1,41}[OA]S?\s*(PRESENTE)?S?\s*(LIDE|DEMANDA|PRETENS(OE|AO)|PEDIDO|PETIC(AO|OE)|AC(AO|OE))S?)\s*(INICIA(L|IS))?'
    # txt_mov_sem_merito = '((DECLARO|JULG[OA](NDO|R)?)?\s*(EXTIN[GT](UIR|[OA])|ENCERRAD[OA])\s*.{1,41}?[OA]?S?\s*(PRESENTE)?S?\s*(SEM\s*(RESOLUCAO|EXAME)\s*D[OE]\sMERITO))'
    # txt_mov_sem_merito = '((DECLARO|JULG[OA](NDO|R)?)?\s*(EXTIN[GT](UIR|[OA])|ENCERRAD[OA])\s*.{1,41}?[OA]?S?\s*(PRESENTE)?S?\s*((SEM\s*(RESOLUCAO|EXAME|APRECIACAO)\s*D[OE]\sMERITO)|(,?NOS\s*TERMOS\s*DOS?\s*ARTS?\.?\s*267)))'
    # txt_mov_sem_merito = '((DECRETO|DECLARO|JULG[OA](NDO|R)?)?\s*(A\s*)?(EXTIN[GTC](AO|UIR|[OA]|UINDO)|ENCERRAD[OA]|RESOLVO)\s*.{1,41}?[OA]?S?\s*(PRESENTE)?S?\s*((SEM\s*(RESOLUCAO|EXAME|APRECIA(R|CAO)|JULGAMENTO)\s*D?[OE]\sMERITO)|(,?NOS\s*TERMOS\s*DOS?\s*ARTS?\.?\s*267)))'
    #
    # txt_mov_parc_proc = '(JULG[OA]R?\s*PARCIALMENTE\s*PROCEDENTE\s*.{1,41}?[OA]S?\s*(PRESENTE)?S?\s*(LIDE|DEMANDA|PRETENS(OE|AO)|PEDIDO|PETIC(AO|OE)|AC(AO|OE))S?)\s*(INICIA(L|IS))?|JULGO\s*PROCEDENTE\s*EM\s*PARTE\s*(O\s*PEDIDO\s*FORMULADO\s*NA\s*INICIAL)?'
    #
    # txt_mov_improc = '(JULGO\s*A\s*DEMANDA\s*IMPROCEDENTE)|((JULG[OA]R?\s*IMPROCEN?DENTE|REJEITO)\s*.{1,41}?[OA](\(S\))?\s*(PRESENTE)?S?\s*(LIDE|DEMANDA|PRETENS(OE|AO)|PEDIDO|PETIC(AO|OE)|AC(AO|OE))S?)\s*(INICIA(L|IS))?'
    #
    # # txt_mov_proc = '((ACOLHO|JULG[OA]R?\s*PROCEDENTE)\s*.{1,41}[OA]S?\s*(PRESENTE)?S?\s*(LIDE|DEMANDA|PRETENS(OE|AO)|PEDIDO|PETIC(AO|OE)|AC(AO|OE))S?)\s*(INICIA(L|IS))?'
    # txt_mov_proc = 'JULGO\s*PROCEDENTE.*?PEDIDO|(JULGO\s*A\s*DEMANDA\s*PROCEDENTE)|((ACOLHO|JULG[OA]R?(\-SE)?\s*PROCEDENTE(\(S\))?)\s*.{1,41}?[OA](\(?S\)?)?\s*(PRESENTE)?S?\s*(LIDE|DEMANDA|PLEITO|PRETENS(OE|AO)|PEDIDO(\(?S\)?)?|PETIC(AO|OE)|AC(AO|OE))S?)\s*(INICIA(L|IS))?'
    # # txt_mov_acordo = 'HOMOLOGO\s*(POR\s*SENTENCA\s*)?,?[OA]\s*(ACORDO|TRANSACAO)\s*(((FIRMADO)|(CELEBRAD[OA])|ENTABULADO|(A\s*QUE CHEGARAM))\s*(PEL|ENTRE)?\s*A[S5]\s*PARTES)?'
    # txt_mov_acordo = '(CHEGOU-SE\s*AO\s*ACORDO\s*)|(HOMOLOG(O|A(\-SE)?)\.?\s*(POR\s*SENTENCA\s*)?,?\s*.*?([OA]\s*)?(PRESENTE\s*|TODOS\s*OS\s*TERMOS\s*DO\s*)?(ACORDO|TRANSACAO)\s*((FIRMADO)|(CELEBRAD[OA])|FEIT[OA]|ENTABULADO|(A\s*QUE CHEGARAM))?\s*((PEL|ENTRE)?\s*A[S5]\s*PARTES)?)'
    #
    # txt_mov_emb_acolhido = 'DOU\s*PROVIMENTO\s*AOS\s*EMBARGOS\s*DE\s*DECLARACAO'

    tp_mov_recurso = {
        "provido_parcial": 'PROCEDENTE\s*EM\s*PARTE|PROVIMENTO\s*PARCIAL|PARCIAL\s*PROVIMENTO|CONHECIDO\s*(EM\s*PARTE)\s*O\s*RECURSO\s*E?\s*PROVIDO|CONHECIDO\s*O\s*RECURSO\s*E?\s*PROVIDO\s*(EM\s*PARTE)|DECISAO\s*PROVIMENTO\s*EM\s*PARTE',
        "provido": 'PEDIDO\s*PROCEDENTE|DEU\s*PROVIMENTO\s*($|[AO]+S?\s(?!EMBARGOS))|RECURSOS?\s*PROVIDOS|TURMA.{0,10}(MAIORIA|UNANIMIDADE)[,\s]+ANULOU\s*AS?\s*SENTENCA|CONHECIDO\s*O\s*RECURSO\s*E?\s*PROVIDO|DECISAO\s*PROVIMENTO',
        "negado": 'IMPROCED|NEGOU\s*PROVIMENTO|RECURSOS?\s*NAO\s*PROVIDOS',
        'embargo_acolhido': 'ACOLH(EU|IMENTO)\s*(OS|DE)\s*EMBARGOS\s*DE\s*DECLARACAO|EMBARGOS\s*DE\s*DECLARACAO\s*ACOLHID',
        'embargo_rejeitado': '(REJEIT(OU|AR)\s*|NAO\s*CONHECEU\s*D)(OS)?\s*EMBARGOS\s*DE\s*DECLARACAO|EMBARGOS?\s*DE\s*DECLARACAO\s*REJEITADOS?',
        'embargo_parcial_acolhido': '(ACOLHEU,?\s*EM\s*PARTE,?\s*|DEU\s*PARCIAL\s*PROVIMENTO\s*A?)OS\s*EMBARGOS\s*DE\s*DECLARACAO',
        'apela_rejeit': 'APELAC.*(REJEIT(OU?|ADA|AR)|IMPROV|IMPROC|NAO\s*CONHEC)|NEGA.*APELAC|(REJEIT(OU?|ADA|AR)|IMPROV|IMPROC|NAO\s*CONHEC|NEGOU).*APELAC',
        'apela_acolhida': '(APELAC|REMESSA).*ACOLH|(UNANIMIDADE|MAIORIA)[\s,]*(DEU\s*PROVI|RECEB|(ACOLH|CONH))\w+\s*D?AS?\s*(APELA|REMESSA)',
        'apela_parc_acolhida': '(SENTENCA)?.*?(APELAC|REMESSA).*?ACOLHIDAS.*?EM.*?PARTE|(ACOLHEU|CONHECEU),?\s*EM\s*PARTE,?\s*D?AS?\s*(APELAC|REMESSA)|PARCIAL\s*PROVIMENTO\s*AS?\s*(APELAC|REMESSA)',
        'agrav_acolhido': 'AGRAV.*ACOLH|((UNANIMIDADE|MAIORIA)[\s,]*)?(D(EU|AR)\s*PROVI|RECEB|(ACOLH|CONH))\w+\s*[AD]?A?OS?\s*AGRAV',
        'agravo_rejeit': 'AGRAV.*(REJ|IMPROV|IMPROC|NAO\s*CONHEC)|NEGA.*AGRAV|(\\bREJ|IMPROV|IMPROC|NAO\s*CONHEC|NEGOU).*AGRAV',
        'agrav_parc_acolhidos': '(SENTENCA)?.*?AGRAV.*?ACOLHIDOS.*?EM.*?PARTE|ACOLHEU,?\s*EM\s*PARTE,?\s*OS\s*AGRAV|(D(EU|AR)\s*(PARCIAL)\s*PROVI|RECEB|(ACOLH|CONH))\w+\s*[AD]?A?OS?\s*AGRAV',
        'sem_merito': 'TURMA.{0,10}(MAIORIA|UNANIMIDADE)[,\s]+(NAO\s*CONHECEU|JULGOU\s*PREJUDICAD[AO]|DECLAROU\s*(A\s*EXTINCAO|EXTINTA)\s*D?A\s*PUNIBILIDADE)|DEVOLVIDOS?\s*C(OM)?\s*DECISAO\s*(FINAL\s*)?TERMINATIVA',
        'tp_indefinido_precisa_do_texto': 'TURMA.{0,10}(MAIORIA|UNANIMIDADE)[,\s]*((DECIDIU(\/JULGOU)?|JULGOU EXTINTO|PRELIMINARMENTE|VENCIDO)?$|DECLAROU-SE\s*INCOMPETENTE|RETIFICOU\s*)'
    }

    txt_mov_recurso = {
        "provido_parcial": 'D(ANDO|EU)\s*PARCIAL\s*PROVIMENTO\s*(AS?\s*APELAC(AO|OES)|AOS?\s*(AGRAVO|RECURSO)|AS?\s*REMESSA)|(((ACORDAM|DECIDEM?)(.*?))?(DAR(\-LHE)?|CONHECER)\s*(PARCIAL\s*PROVIMENTO|PARCIALMENTE|PROVIMENTO\s*(PARCIAL|EM\s*PARTE)))(\s*[AD]O\s*RECURSO|(RECURSO\s*CONHECIDO\s*E\s*(PROVIDO|ACOLHIDO)\s*EM\s*PARTE))?|(RECURSO\s*PROVIDO.{1,7}(SENTENCA\s*PARCIALMENTE\s*REFORMADA))',
        "provido": '(?<!ONDE SE LE )D(AR|ANDO|EU)\s*PROVIMENTO\s*AO?S?\s*(RECURSOS?\s*DE\s*)?(APELAC(OES|AO)|AGRAVO)|ACORDAM\s*OS\s*JUIZES.*?DECLARAR\s*NULA\s*A\s*SENTENCA|CONHECER\s*DO\s*RECURSO\s*E\s*DAR.*?PROVIMENTO|((ACORDAM|DECIDEM?)(.*))?D(AR|EU)\s*PROVIMENTO\s*AO\s*RECURSO|(RECURSO\s*CONHECIDO\s*E\s*(PROVIDO|ACOLHIDO))|(RECURSO\s*PROVIDO.{1,7}(SENTENCA\s*(ALTERADA|REFORMADA)))|CONHECER\s*O\s*RECURSO.{1,100}?DAR(\-LHE)?\s*PROVIMENTO|ANUL(OU|AR)\s*AS?\s*SENTENCA',
        "negado": 'AGRAVO\s*INTERNO\s*NAO\s*PROVIDO|DECISAO\s*MANTIDA\s*POR\s*SEUS\s*PROPRIOS\s*FUNDAMENTOS|SENTENCA\s*MANTIDA\s*(PELOS\s*SEUS\s*PROPRIOS\s*FUNDAMENTOS)?|MANUTENCAO\s*DA\s*SENTENCA\s*DE\s*(IM)?PROCEDENCIA|((ACORDAM|DECIDEM?)(.*?))?\s*(NEG((AR(\-LHE)?)|OU?))\s*PROVIMENTO(\s*AO\s*RECURSO)?|(RECURSO\s*CONHECIDO\s*E\s*NAO\s*(PROVIDO|ACOLHIDO))|(RECURSO\s*(NAO\s*|DES|IM)?PROVIDO.{1,7}(SENTENCA\s*MANTIDA))|ACORDAOIMPROVIDO|RECURSO\s*DESPROVIDO|((ACORDAM|DECIDEM?)(.*?))?\s*NAO\s*PROVER(\s*[AD]O\s*RECURSO)?|A\s*TURMA.*?DESPROVEU\s*OS?\s*RECURSOS?|NEGANDO\s*SEGUIMENTO\s*[AO]+S?\s*(AGRAVO|RECURSO|APELAC(AO|OES))',
        "embargo_acolhido": 'ACEITAR\s*OS\s*EMBARGOS\s*DE\s*DECLARACAO|((ACOLHO\s*OS)\s*(EMBARGOS\s*DE\s*DECLARACAO))|((EMBARGOS\s*DE\s*DECLARACAO)[\s-]*(ACOLHIDOS|CONHECIDOS))|JULGO\s*PROCEDENTE\s*OS?\s*(PRESENTES?)?\s*EMBARGOS',
        "embargo_rejeitado": '(REJEIT(AR|OU)|NAO CONHECEU)\s*D?OS\s*EMBARGOS\s*DE\s*DECLARACAO|(((NAO\s*CONHECO|REJEITO|DESACOLHO)\s*D?OS?)\s*(EMBARGOS\s*DE\s*DECLARACAO|RECURSO\s*INOMINADO))|((EMBARGOS\s*DE\s*DECLARACAO)\s*((CONHECIDOS\s*E\s*)?(REJEITADOS|DESACOLHIDOS)|NAO\s*CONHECIDOS))',
        'embargo_parcial_acolhido': 'CONHECER\s*DOS\s*EMBARGOS.{1,20}?DAR.{1,5}?PARCIAL\s*PROVIMENTO|EMBARGOS?\s*DE\s*(DECLARACAO|EXECUCAO)[\s-]*ACOLHIDOS\s*(EM\s*PARTE|PARCIALMENTE)',
        'sem_merito': '(NAO CONHECEU|SEM (RESOLUCAO|JULGAMENTO)|PREJUDICAD[AO]S?)\s(?!DOS\s*SEGUNDOS\s*EMBARGOS\s*)(?!O\s*RECURSO\s*DE\s*EMBARGOS)(?!D?OS?\s*EMBARGOS\s*DE\s*DECLARACA)|TERMINATIVO|(JULGANDO\s*EXTINTO\s*[AO]S?\s*|DECLAR(AN?D[AO]|O)\s*EXTINTA\s*[OA]?\s*)(PROCESSO|AGRAVO|APELAC|RECURSO|PUNIBILIDADE)'
        #"nulo": '(SENTENCA\s*DECLARADA\s*NULA|ACORDAM\s*OS\s*JUIZES.*?DECLARAR\s*NULA\s*A\s*SENTENCA|PREJUDICADO\s*O\s*RECURSO)'
    }

    txt_pena_sentenca_pnud = {
        'ressarcimento_dano': '((RESSARCI(MENTO|R)|DEVOLVER(EM)?|REPOR(EM)?),?\s*(DE\s*FORMA\s*)?(INTEGRAL|SOLIDARI[AO](MENTE)?)?\s*(D[OE]S?|AO?S?|EM)?.{0,50}?(FAVOR|ERARIO|DANO|PREJUIZO|VALORE?|UNIAO|DNPM)S?)|((APLIC(O|ANDO[-\s]?(LHES?))|CONDEN|CONCLU|JULG|DECLARO|DECRETO).{0,550}?(RES(TITUIR|SARCIR)|RESSARCIMENTO|(DEVERA\s*)?DEVOLVER(EM)?|DEVOLUCAO\s*DOS\s*VALORES\s*RECEBIDOS|REPOREM|SER\s*RESSARCID[OA]),?\s*(AO?S?\s*)?((ERARIO|(COFRES D)?A UNIAO|INTEGRAL(MENTE)?)|.{0,150},?([DN]?[OA]|PELA)\s*(VALOR|IMPORTANCIA|MONTANTE)\s*(DE|INTEGRAL|PROPORCIONAL))?|((CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR).{0,550}?(((INC(ISOS?|\.?)\s*)?(II?I?|1|2|3)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(II?I?|1|2|3)))\\b)|((((INC(ISOS?|\.?)\s*)?(II?I?|1|2|3)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(II?I?|1|2|3))).{0,200}(CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR))|GER(OU|ARAM).{0,30}GASTO\s*PUBLICO[,\s]*(SENDO\s*DEVIDO|DEVENDO)[,\s]*PORTANTO.{0,20}RESSARCI(R|MENTO)|DEVER\s*DE\s*RESSARCIMENTO\s*AO?.{1,50}|DECIDIU\s*PELA\s*LEGITIMIDADE.{1,50}RESSARCIMENTO)',
        'negar_ressarcimento_dano': '((NO\s*TOCANTE\s*AO\s*PEDIDO\s*DE|HIPOTESE|NAO\s*(HA|DEVE|PROCEDEU)|SE\s*PRETENDE\s*A\s*CONDENACAO|DEVE\s*SER REJEITADO|SE C?ON?CORRER\s*ESTA\s*CIRCUNSTANCIA|NAO\s*E\s*POSSIVEL|ANULAR\s*O?\s*PROCEDIMENTO(\s*ADMINISTRATIVO)?\s*QUE IMPOS|INCABIVEL).{0,150}RESSARCIMENTO\s*((INTEGRAL|SOLIDARIO)?\s*(DOS?\s*)?DANOS?|AO ERARIO|D[OE]S?\s*(VALORES|MONTANTE)))|((RESSARCIMENTO\s*(INTEGRAL|SOLIDARIO)?\s*(DOS?\s*)?DANOS?|AO ERARIO).{0,150}((SE|QUANDO)\s*HOUVER|AUSENCIA\s*DE\s*SUA\s*COMPROVACAO))|(DEIXO\s*DE\s*(APLICAR|CONDENA(R|-?LOS?))\s*([OA]*S?\s*(PENA|REU|REQUERIDO)S?)?\s*(AS?\s*PENAS?)?\s*(DE|AO)?.{0,100}\s*(RESSARCIMENTO|DEVOLU[CÇ][AÃ]O\s*D[OE]S\s*VALORES)|UNIAO\s*A\s*RESSARCIR|(ANULO\s*O\s*ATO\s*ADMINISTRATIVO|NAO\s*IMPEDE\s*POSTERIOR).{0,50}(RESTITUI|RESSARCI)(SSE|R|CAO|MENTO)|ASSEGURAR.{0,50}NAO TER QUE DEVOLVER)|IMPOSSIBILIDADE\s*DE\s*CONDENA(R|CAO)\s*AO\s*RESSARCIMENTO|CONDEN(AR|O)\s*A\s*(UNIAO|FAZENDA\s*NACIONAL)|SEQUER\s*SE\s*PREOCUPOU\s*EM\s*RESSARCIR',

        'perda_de_bens_ou_valores': '((DECRET[OA]|REITERO|DEFIRO|DECLARO|MANTENHO|DETERMIN[AO]R?|FICA\s*MANTIDA|IMPOE\-?SE|ORDENO).{0,100}(INDISPONIBILIDADE|BLOQUEIO)\s*D[EO]S?\s*(QUANTOS|SEUS)?\s*BENS|((CONDEN(A[RL]|O|ACAO)|FICA\s*CONDENAD|SANC(OES|AO)).{0,550}|(APLIC(AR|O|ACAO)|FIXO\s*).{0,150})\s*PERDA\s*D(OS|E)\s*BENS|CONSTRINJAM\-?SE\s*BENS|((CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR).{0,550}?(((INC(ISOS?|\.?)\s*)?(II?|1|2)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(II?|1|2)))\\b)|((((INC(ISOS?|\.?)\s*)?(II?|1|2)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(II?|1|2)))\\b.{0,200}(CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR)))',
        'negar_perda_de_bens_ou_valores': '(((NO\s*TOCANTE\s*AO\s*PEDIDO\s*DE|HIPOTESE|NAO\s*(HA|DEVE)|SE\s*PRETENDE\s*A\s*CONDENACAO|DEVE\s*SER REJEITADO|EXCLUSAO\s*DA\s*INDISPONIBILIDADE|INDEFIRO|SE C?ON?CORRER\s*ESTA\s*CIRCUNSTANCIA).{0,150}|(ABSOLVO|DEIXO)\s*D[AE]\s*(DECRETAR|APLICAR.{0,100})?\s*A?\s*(PERDA|INDISPONIBILIDADE)\s*D?[AEO]?S?\s*((EVENTUA(L|IS)|QUALQUER|S(EU|UA))\s*)?(TEMPO D[OA]S?)?\s*)\s*(BENS|VALORES))',

        'perda_cargo_emprego_funcao': '((PERDA\s*D?[AEO]?S?\s*((EVENTUA(L|IS)|QUALQUER|S(EU|UA)|AMBOS(\s*OS)?|DEFINITIVA|RESPECTIVOS?)\s*)?|AFASTAMENTO)\s*(TEMPO D[OA]S?|D[AO]S?)?\s*((FUNC(AO|OES)|CARGOS?|EMPREGO)\s*(OU)?\s*)+\s*(PUBLIC[AO])?|((CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR).{0,550}?(((INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)))\\b)|((((INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4))).{0,200}(CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR)))',
        'negar_perda_cargo_emprego_funcao': '(((NO\s*TOCANTE\s*AO\s*PEDIDO\s*DE|HIPOTESE|NAO\s*(HA|DEVE|APLICO)|SE\s*PRETENDE\s*A\s*CONDENACAO|DEVE\s*SER REJEITADO).{0,150}|(ABSOLVO|DEIXO)\s*D[AE]\s*(DECRETAR|APLICAR|CONDENA(R|-?L[OA]S))?(\s*[AO]*S?\s*RE(QUERIDO|U)S?)?\s*.{0,100}A?\s*PERDA\s*D?[AEO]?S?\s*((EVENTUA(L|IS)|QUALQUER|S(EU|UA))\s*)?(TEMPO D[OA]S?)?\s*)((FUNC(AO|OES)|CARGOS?|EMPREGO)\s*(OU)?\s*)+\s*(PUBLIC[AO])?|INAPLICAVE(L|IS)\s*A\s*SANCAO\s*DE\s*PERDA\s*D[OA]\s*(FUNCAO|CARGO))',

        'direitos_politicos': '((PERDA|SUSPEN(SA?OS?|DO))\s*O?(\s*EXERCICIO)?\s*D?(OS|E)(\s*SEUS?)?\s*DIR[A-Z~;-]+OS\s*POLITICOS)|(OS? DIREITOS? POLITICOS?.{0,50} PERMANECERAO? SUSPENSOS?|((CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR).{0,550}?(((INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)))\\b)|((((INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4))).{0,200}(CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR)))',
        'negar_direitos_politicos': '((NO\s*TOCANTE\s*AO\s*PEDIDO\s*DE|HIPOTESE|NAO\s*(HA|DEVE|APLICO)|SE\s*PRETENDE\s*A\s*CONDENACAO|DEVE\s*SER REJEITADO|SE C?ON?CORRER\s*ESTA\s*CIRCUNSTANCIA).{0,150}(SUSPENSAO|PERDA)\s*(TOTAL\s*)?DOS\s*DIREITOS\s*POLITICOS\s*)|(NAO\s*AUTORIZA\s*O\s*CASO\s*.{1,50}|ABSOLVO|DEIXO\s*DE\s*(IMPOR|APLICAR\s*A\s*PENA|CONDENA(R|[\s\-]*LO))|SOB\s*PENA\s*(DE\s*INCIDENCIA)?|SEM\s*PREJUIZO|AFASTO\s*A?\s*(INCIDENCIA)?)\s*D?[EA]\s(PERDA|SUSPEN(SA?OS?|DO))\s*(TOTAL)?\s*D[EO]S?\s*DIREITOS?\s*POLITICOS?',

        #'inelegivel': '(CADASTRAMENTO\s*D[EAO]S?|CADASTRO\s*NACIONAL\s*D[EAO]S?)\s*CONDENA(CAO|COES|DOS?)\s*(CIVEIS\s*)?POR\s*(ATO\s*DE\s*)?IMPROBIDADE\s*(ADMINISTRATIV[OA]\s*)?E\s*(POR\s*ATO\s*(QUE|DE)\s*IMPLIQUE\s*)?(EM\s*)?INELEGIBILIDADE|(DEVE|(TORNA(\-?LO)?)|IMPO(R|NDO-LHES?)\s*AS?\s*SANC(AO|OES)).{0,240}INELEGI|(REGISTRO|INCLUSAO|ALIMENTACAO)\s*((DOS?\s*NOMES?)?\s*DOS?\s*CONDENADOS?)?\s*[DN]O\s*CADASTRO.{0,150}INELEGI',
        #'negar_inelegivel': '(DESPESAS?|NAO SE ENQUADRA).{0,40}?INELEGI|INATIVAR\s*CONDENACAO',

        'inelegivel': '(DEVE|(TORNA(\-?LO)?)|IMPO(R|NDO-LHES?)\s*AS?\s*SANC(AO|OES)).{0,240}INELEGI|(REGISTRO|INCLUSAO|ALIMENTACAO)\s*((DOS?\s*NOMES?)?\s*DOS?\s*CONDENADOS?)?\s*[DN]O\s*CADASTRO.{0,150}INELEGI',
        'negar_inelegivel': '(DESPESAS?|NAO SE ENQUADRA).{0,40}?INELEGI',

        'multa': '(((PAGA(MENTO|R)((\s*INDIVIDUAL|.{0,50})?\s*D[EAO]S?))|(CONDEN(A[RL]|O|ACAO)|FICA\s*CONDENAD|SANC(OES|AO)).{0,550}|(APLIC(AR|O|ACAO)|FIXO\s*).{0,150})\s*\\bMULTA\s*(CIVIL)?|\\bMULTA\s*(CIVIL)?\s*.{0,150}(NO\s*PATAMAR|QUE\s*FIXO|SOLIDARIAMENTE|PECUNIARIA)?,\s*([ND]O\s*(VALOR|IMPORTE|PATAMAR|QUANTIA)|CORRESPONDENTE\s*A|EQUIVALENTE\s*A|EM\s*FAVOR|DIARIA)|PENA\s*DE\s*MULTA\s*NOS\s*SEGUINTES\s*MOLDES|((CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR).{0,550}?(((INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)))\\b)|((((INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(I(I?I?|V?)|1|2|3|4))).{0,200}(CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR))|CONDEN(O|AR?|ANDO)\s*([OA]S?\s*(PARTES?\s*)?(REU?|REQUERID[AO])S?|-?LO).{0,200}\s*[AN]O?\s*PAGA(MENTO|R)\s*.{0,350}((QUANTIA|VALOR(ES)?|MONTANTE|IMPORTE|PATAMAR|IMPORTANCIA)\s*(DE|RECEBIDOS|POSTULADO)|CORRESPONDENTE))',
        'negar_multa': '(ABSOLVO|DEIXO\s*DE\s*(IMPOR|APLICAR\s*A\s*PENA|CONDENA(R|[\s\-]*LO))|SOB\s*PENA\s*(DE\s*INCIDENCIA)?|SEM\s*PREJUIZO|AFASTO\s*A\s*INCIDENCIA)\s*D?[EA]\s*MULTA|(DECRETO\s*A\s*NULIDADE|SEM\s*A?\s*COBRANCA)\s*D[EA]\s*MULTA',

        'proibicao_contratar_poder_publico': '((DEVE\s*SER\s*IMPEDIDA|PROIB(O(\-[OA])?|ICAO|IR|I\-?[LD][OA]S?)|NAO PODE(RA|NDO)|VEDACAO|SUSPENSAO).{0,250}(\s*(A?O?S?\s*)?(REUS?\s*)?(DE)?\s*CONTRA.{0,50}PODER\s*PUBLICO\s*|RECEB\w+\s*(DE|QUALQUER)\s*(BENEFICIOS?|INCENTIVOS?))|((CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR).{0,550}?(((INC(ISOS?|\.?)\s*)?(II?I?|1|2|3)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(II?I?|1|2|3)))\\b)|((((INC(ISOS?|\.?)\s*)?(II?I?|1|2|3)\s*DO\s*(ART(IGO|\.)?\s*12,?\s*))|(ART(IGO|\.)?\s*12(\\b|I),?\s*(INC(ISOS?|\.?)\s*)?(II?I?|1|2|3))).{0,200}(CONDENAR|CONCLU|JULGO\\b|DECLARO|DECRETO|APLICAR)))',
        'negar_proibicao_contratar_poder_publico': 'CONSIDERO\s*DESCABIDA\s*A?\s*PROIBICAO\s*DE\s*CONTRATAR\s*(COM)?\s*O\s*PODER\s*PUBLICO'
        # 'CONTRAT.{0,50}PODER\s*PUBLICO|RECEB.{0,30}(BENEFIC|INCENT|CRED)'
    }

    tp_mov_sentenca = {

        'sem_merito': '(EXTIN|SENTEN|DECISAO).{0,30}(ADIMPL|DESIST|PERDA\s*(DE)?\s*INTERESSE|INDEF.{0,30}INICIAL|ABANDONO|(SEM|S\s)\s*EXAME\s*DO\s*MERITO)',
        'parcial_proc': 'PARC(IAL)?(MENTE)?\s*PROCED|PROC(EDENTES?)?\s*(EM)?\s*PARTE',
        'acordo': 'ACORDO|HOMOLOGADA\s*TRANSACAO|HOMOLOGACAO\s*DO\s*TERMO',
        'improc': 'IMPROC|DEVOLVIDOS\s*C(OM)?\s*SENTENCA.{0,40}(ABSOLUTORIA\s*$)',
        'procedente': 'ACOLHEPEDAUT|PROCEDENTE|DAR\s*PROVIMENTO|PORCEDENTE|DEVOLVIDOS\s*C(OM)?\s*SENTENCA.{0,40}(CONDENATORIA)',
        'emb_parc_acolhidos': '(SENTENCA)?.*?EMBARGOS.*?ACOLHIDOS.*?EM.*?PARTE|ACOLHEU,?\s*EM\s*PARTE,?\s*OS\s*EMBARGOS|PARCIAL\s*PROVIMENTO\s*AOS\s*EMBARGOS',
        'emb_acolhidos': 'EMB.*ACOLH|(UNANIMIDADE|MAIORIA)[\s,]*(DEU\s*PROVI|RECEB|(ACOLH|CONH))\w+\s*[AD]?OS?\s*EMBARGOS|EMBARGOS\s*DE\s*DECLARACAO\s*PROVIDOS',
        'emb_rejeit': 'EMB.*(REJ|IMPROV|IMPROC|NAO\s*CONHEC)|NEGA.*EMB|(REJ|IMPROV|IMPROC|NAO\s*CONHEC|NEGOU).*EMBARGOS'
    }
    tp_mov_pnud = {
        'parcial_proc': 'PARC(IAL)?(MENTE)?\s*PROCED|PROC(EDENTES?)?\s*(EM)?\s*PARTE',
        'acordo': '(HOMOLOG.*ACORDO|ACORDO\s*(?!NAO)ACEITO|HOMOLOGADA\s*TRANSACAO|HOMOLOGACAO\s*DO\s*TERMO)(?!\sEMB)',
        'improc': '(?<!PEDE\s)(?<!EMBARGOS\s)(?<!EMBARGO\s)(?<!EMBARGO)(?<!EMBARGOS)(IMPROC(EDEN(CIA|TES?))?\s*|DEVOLVIDOS\s*C(OM)?\s*SENTENCA.{0,40}(ABSOLUTORIA\s*$))(?!DO EMBARGO)(?!DOS EMBARGO)',
        'procedente': '(?<!EMBARGOS\sSEJAM\s)(?<!IM)(ACOLHEPEDAUT|PROCEDENTE|DAR\s*PROVIMENTO|PORCEDENTE|DEVOLVIDOS\s*C(OM)?\s*SENTENCA.{0,40}(CONDENATORIA))',
        'sem_merito': '(EXTIN|SENTEN|DECISAO).{0,30}(ADIMPL|DESIST|PERDA\s*(DE)?\s*INTERESSE|INDEF.{0,30}INICIAL|ABANDONO|(SEM|S\s)\s*(EXAME|RESOLUCAO|APRECIACAO|JULGAMENTO)\s*(D|N)(O|E)\s*MERITO)',
        #AS QUE ESTÃO PRÓXIMAS SÃO DO MESMO TIPO, DEVERIAM ESTAR NA MESMA TABELA?
        'citacao': 'CITACAO[:\s]*(POR|PEL[OA]|REALIZADA|ORDENADA)|(CERTIDAO[\s_]*(TERMO[\s_]*)?|MOVIMENTACAO\s*CARTORARIA\s*TIPO\s*)CITACAO',

        'liminar_indeferida': '(DEVOLVIDOS?\s*C(OM)?\s*)?(DECISAO)?[:\s]*(LIMINAR|TUTELA)\s*(ANTECIPADA)?\s*INDEFERIDA',
        'liminar_deferida_parcial': '(DEVOLVIDOS?\s*C(OM))?\s*DECISAO[:\s]*(LIMINAR|TUTELA)\s*(ANTECIPADA)?\s*(PARCIALMENTE)?\s*DEFERIDA\s*(EM\s*PARTE)?',
        'liminar_deferida': '(DEVOLVIDOS?\s*C(OM)?\s*)?DECI((DIU)|(SAO))[:\s]*.{1,100}(LIMINAR|TUTELA)\s*(ANTECIPADA)?\s*DEFERIDA', #ESTE CASO TEM QUE SER TESTADO DEPOIS DO PARCIAL PORQUE ELE PEGA O DEFERIDO E O PARCIAL

        'contestacao_apresentada': '(RESPOSTA[\s:]*)?((CONTESTACAO|INFORMACOES)\s*(IMPUGNACAO)?\s*APRESENTADA)|CONTESTACAO\s*REU',
        'contestacao_nao_apresentada': 'PRAZO\s*CERTIFICADO\s*TRANSCURSO\s*IN\s*ALBIS',

        'defesa_previa': 'DEFESA\s*PREVIA\s*APRESENTADA',

        'transito_em_julgado': '^TRANSITO\s*EM\s*JULGADO\s*(EM)?$|((INTEIRO_TEOR|MIGRACAO|COMUNICA)[\-\s]*|^)TRANSITO\s*EM\s*JULGADO\s*(EM|$)',

        'suspensao_processo_civel': 'SUSPENSAO\s*(DO)?\s*PROCESSO\s*CIVEL[:\s]*ORDENADA',
        'suspensao_processo_penal': 'SUSPENSAO\s*(DO)?\s*PROCESSO\s*PENAL[:\s]*ORDENADA',
        'sobrestamento':'^(PROCESSO|SUSPENSAO\/?)?\s*SOBRESTA(MENTO|DO)[\s\-:]*(DECISAO|AGUARDANDO|MATERIA\s*ASSUNTO|ORDENADO|OUTROS|CONFLITO|$)',

        'recurso_apelacao_interposta_reu' :'RECURSO\s*APELACAO\s*INTERPOSTA\s*REU',
        'recurso_agravo_retido_interposto_reu' :'RECURSO\s*AGRAVO\s*RETIDO\s*INTERPOSTO\s*REU',
        'recurso_recurso_adesivo_interposto_reu' :'RECURSO\s*RECURSO\s*ADESIVO\s*INTERPOSTO\s*REU',
        'recurso_apelacao_interposta_autor' :'RECURSO\s*APELACAO\s*INTERPOSTA\s*AUTOR',
        'recurso_recurso_adesivo_interposto_autor' :'RECURSO\s*RECURSO\s*ADESIVO\s*INTERPOSTO\s*AUTOR',
        'recurso_agravo_retido_interposto_autor' :'RECURSO\s*AGRAVO\s*RETIDO\s*INTERPOSTO\s*AUTOR',
        'recurso_embargos_infringentes_apresentados' :'RECURSO\s*EMBARGOS\s*INFRINGENTES\s*APRESENTADOS',
        'recurso_apelacao_interposta' :'RECURSO\s*APELACAO\s*INTERPOSTA',
        'agravo_de_instrumento_interposto' :'AGRAVO\s*DE\s*INSTRUMENTO\s*INTERPOSTO',
        'recurso_recurso_sentido_estrito_interposto' :'RECURSO\s*RECURSO\s*SENTIDO\s*ESTRITO\s*INTERPOSTO',
        'agravo_interno_interposto' :'AGRAVO\s*INTERNO\s*INTERPOSTO',
        'recurso_agravo_de_instrumento_apresentado_comprovante_de_interposicao' :'RECURSO\s*AGRAVO\s*DE\s*INSTRUMENTO\s*APRESENTADO\s*COMPROVANTE\s*DE\s*INTERPOSICAO',
        'embargos_de_declaracao_opostos' :'EMBARGOS\s*DE\s*DECLARACAO\s*OPOSTOS',
        'convertido_diligencia': 'CONVERTIDO\s*EM\s*DILIGENCIA',

        'emb_parc_acolhidos': '(SENTENCA)?.*?EMBARGOS.*?ACOLHIDOS.*?EM.*?PARTE|ACOLHEU,?\s*EM\s*PARTE,?\s*OS\s*EMBARGOS|PARCIAL\s*PROVIMENTO\s*AOS\s*EMBARGOS',
        'emb_acolhidos': '\\bEMB.*ACOLH|(UNANIMIDADE|MAIORIA)[\s,]*(DEU\s*PROVI|RECEB|(ACOLH|CONH))\w+\s*[AD]?OS?\s*EMBARGOS|EMBARGOS\s*DE\s*DECLARACAO\s*PROVIDOS',
        'emb_rejeit': '\\bEMB.*(REJ|IMPROV|IMPROC|NAO\s*CONHEC)|NEGA.*\\bEMB|(REJ|IMPROV|IMPROC|NAO\s*CONHEC|NEGOU).*EMBARGOS?',
        'extincao_punibilidade': '((MERITO|DECLAROU)[A:\s]*)?EXTINCAO\s*DA\s*PUNIBILIDADE',
        'apela_rejeit': 'APELAC.{1,50}(REJEIT(OU?|ADA|AR)|IMPROV|IMPROC|NAO\s*CONHEC|NEGA)|NEGA.*APELAC|(REJEIT(OU?|ADA|AR)|IMPROV|IMPROC|NAO\s*CONHEC|NEGOU).*APELAC',
        'apela_acolhida': '(APELAC|REMESSA).*ACOLH|(UNANIMIDADE|MAIORIA)[\s,]*(DEU\s*PROVI|RECEB|(ACOLH|CONH))\w+\s*D?AS?\s*(APELA|REMESSA)',
        'apela_parc_acolhida': '(SENTENCA)?.*?(APELAC|REMESSA).*?ACOLHIDAS.*?EM.*?PARTE|ACOLHEU,?\s*EM\s*PARTE,?\s*AS\s*(APELAC|REMESSA)|PARCIAL\s*PROVIMENTO\s*AS?\s*(APELAC|REMESSA)',
        'agrav_acolhido': 'AGRAV.{1,50}ACOLH|(UNANIMIDADE|MAIORIA)[\s,]*(DEU\s*PROVI|RECEB|(ACOLH|CONH))\w+\s*[AD]?OS?\s*AGRAV',
        'agravo_rejeit': 'AGRAV.{1,50}(REJ|IMPROV|IMPROC|NAO\s*CONHEC|NEGADO)|NEGA.*AGRAV|(\bREJ|IMPROV|IMPROC|NAO\s*CONHEC|NEGOU).*AGRAV',
        'agrav_parc_acolhidos': '(SENTENCA)?.*?AGRAV.*?ACOLHIDOS.*?EM.*?PARTE|ACOLHEU,?\s*EM\s*PARTE,?\s*OS\s*AGRAV',
        'seguranca_concedida': '(UNANIMIDADE|MAIORIA).{1,50}[\s,]*(DEU\s*PROVI|RECEB|CONCED|ACOLH|CONH)\w+\s*A\s*SEGURANCA',
        'seguranca_rejeit': 'SEGURANC.*(REJ|IMPROV|IMPROC|NAO\s*CONHEC)|NEGA.*SEGURANC|(REJ|IMPROV|IMPROC|NAO\s*CONHEC|NEGOU).*SEGURANCA',
        'seguranca_parc_conced': '((SENTENCA)?.*?(SEGURAN).*?CONCEDIDA?.*?EM.*?PARTE)|((CONCEDEU|DECIDIU),?.*\s*EM\s*PARTE,?\s*((DO)?\s*MANDADO)?\s*(A|DE)\s*SEGURANCA)|(DECIDIU.{1,100}\s*(EM\s*PARTE,)?\s*((DO)?\s*MANDADO)?\s*(A|DE)\s*SEGURANCA.{1,50}PARCIALMENTE)',
        'baixa_definitiva': '^BAIXA[\s:\-]*(DE)?\s*(ARQUIVA|DEFINITIV|FINDO)'
    }
    ######## expressoes regulares para classificacao de ACORDAOS do TRF01 de acordo com o texto contido no documento
    txt_mov_recurso_provido_parc = '(((ACORDAM|DECIDEM?)(.*?))?(DAR(\-LHE)?|CONHECER)\s*(PARCIAL\s*PROVIMENTO|PARCIALMENTE|PROVIMENTO\s*(PARCIAL|EM\s*PARTE)))\s*[AD]O\s*RECURSO|(RECURSO\s*CONHECIDO\s*E\s*(PROVIDO|ACOLHIDO)\s*EM\s*PARTE)|(RECURSO\s*PROVIDO.{1,7}(SENTENCA\s*PARCIALMENTE\s*REFORMADA))'
    # txt_mov_recurso_provido_parc = '(((ACORDAM|DECIDEM?)(.*?))?(DAR(\-LHE)?|CONHECER)\s*(PARCIAL\s*PROVIMENTO|PARCIALMENTE|PROVIMENTO\s*(PARCIAL|EM\s*PARTE))\s*[AD]O\s*RECURSO)|(RECURSO\s*CONHECIDO\s*E\s*(PROVIDO|ACOLHIDO)\s*EM\s*PARTE)|(RECURSO\s*PROVIDO.{1,7}(SENTENCA\s*PARCIALMENTE\s*REFORMADA))'

    txt_mov_recurso_provido = 'CONHECER\s*DO\s*RECURSO\s*E\s*DAR.*?PROVIMENTO|((ACORDAM|DECIDEM?)(.*))?D(AR|EU)\s*PROVIMENTO\s*AO\s*RECURSO|(RECURSO\s*CONHECIDO\s*E\s*(PROVIDO|ACOLHIDO))|(RECURSO\s*PROVIDO.{1,7}(SENTENCA\s*(ALTERADA|REFORMADA)))|((ACOLHO\s*OS)\s*(EMBARGOS\s*DE\s*DECLARACAO))|((EMBARGOS\s*DE\s*DECLARACAO)\s*(ACOLHIDOS|CONHECIDOS))'

    txt_mov_recurso_negado = 'SENTENCA\s*MANTIDA\s*PELOS\s*SEUS\s*PROPRIOS\s*FUNDAMENTOS|MANUTENCAO\s*DA\s*SENTENCA\s*DE\s*(IM)?PROCEDENCIA|((ACORDAM|DECIDEM?)(.*?))?\s*(NEG((AR(\-LHE)?)|O))\s*PROVIMENTO(\s*AO\s*RECURSO)?|(RECURSO\s*CONHECIDO\s*E\s*NAO\s*(PROVIDO|ACOLHIDO))|(RECURSO\s*(NAO\s*|DES|IM)?PROVIDO.{1,7}(SENTENCA\s*MANTIDA))|ACORDAOIMPROVIDO|RECURSO\s*DESPROVIDO|(((NAO\s*CONHECO|REJEITO|DESACOLHO)\s*D?OS?)\s*(EMBARGOS\s*DE\s*DECLARACAO|RECURSO\s*INOMINADO))|((EMBARGOS\s*DE\s*DECLARACAO)\s*((CONHECIDOS\s*E\s*)?(REJEITADOS|DESACOLHIDOS)|NAO\s*CONHECIDOS))|((ACORDAM|DECIDEM?)(.*?))?\s*NAO\s*PROVER(\s*[AD]O\s*RECURSO)?|A\s*TURMA.*?DESPROVEU\s*OS?\s*RECURSOS?'

    txt_mov_recurso_nulo = '(SENTENCA\s*DECLARADA\s*NULA|ACORDAM\s*OS\s*JUIZES.*?DECLARAR\s*NULA\s*A\s*SENTENCA|PREJUDICADO\s*O\s*RECURSO)'

    txt_mov_recurso_emb_acolhido = ''

    txt_mov_recurso_emb_negado = ''

    assuntos_acp = 'DANO\s*AMBIENTAL|RESPONSABILIDADE\s*CIVIL|ABUSO\s*DE\s*PODER|ATOS\s*ADMINISTRATIVOS|INDENIZACAO\s*POR\s*DANO\s*AMBIENTAL|INQUERITO\s*PROCESSO\s*RECURSO\s*ADMINISTRATIVO|PATRIMONIO\s*HISTORICO\s*TOMBAMENTO|INDENIZACAO\s*POR\s*DANO\s*MORAL|MODALIDADE\s*LIMITE\s*DISPENSA\s*INEXIGIBILIDADE|ATO\s*LESIVO\s*AO\s*PATRIMONIO\s*ARTISTICO\s*ESTETICO\s*HISTORICO\s*OU\s*TURISTICO|PRESTACAO\s*DE\s*CONTAS|FLORA|EXONERACAO|UNIDADE\s*DE\s*CONSERVACAO\s*DA\s*NATUREZA|NOMEACAO|FORNECIMENTO\s*DE\s*MEDICAMENTOS|TRATAMENTO\s*MEDICOHOSPITALAR|REVOGACAOCONCESSAO\s*DE\s*LICENCA\s*AMBIENTAL|RESSARCIMENTO\s*AO\s*SUS|FAUNA|MEIO\s*AMBIENTE|FISCALIZACAO|RECURSOS\s*MINERAIS|EXECUCAO\s*CONTRATUAL|TRANSPORTE\s*TERRESTRE|UTILIZACAO\s*DE\s*BENS\s*PUBLICOS|SANCOES\s*ADMINISTRATIVAS|CONTRATOS\s*ADMINISTRATIVOS|PERDIMENTO\s*DE\s*BENS|LICITACOES|FUNDO\s*DE\s*PARTICIPACAO\s*DOS\s*MUNICIPIOS|PREFEITO'
    assuntos_improbidade = 'IMPROBIDADE.*ADMINISTRATIVA|PECULATO|CRIME.*DA.*LEI.*DE.*LICITACOES|VIOLACAO.*AOS.*PRINCIPIOS.*ADMINISTRATIVOS|CRIMES.*CONTRA.*A.*ADMINISTRACAO.*PUBLICA|CORRUPCAO.*ATIVA|CRIMES.*CONTRA.*A.*FE.*PUBLICA|ENRIQUECIMENTO.*ILICITO|RESPONSABILIDADE.*CIVIL.*DO.*SERVIDOR.*PUBLICO|(DANO|INDENIZACAO).*ERARIO|DEMISSAO.*EXONERACAO'



    reu = re.compile(
        "REQ(UERI)?(D[OA])|ACUSADO|REU|^RE?|AGRAVA?DO|APELA?DO|ALIMENTAD[OA]|AVERIGUAD[OA]|ARGUIDO|DENUNCIAD[OA]|FALIDO|EXECU?TA?DO|EMBARGA?DO|IMPE?T(RA)?D[OA]|IMPUG(NA)?DO|INDICIAD[OA]|INVESTIGAD[OA]|LIT.*PAS|NOTICIADO|OPOSTO|QUERELAD[OA]|RECONVIND[OA]|RECORRIDO|RECLAMADO|REPR(ESEN)?TAD[OA]|FIADPASS|EXCE?PTO|CHAMADO")
    autor = re.compile(
        "AGRAVANTE|AGRAVTE|APELTE|AUTORA?|APELTE|AUTORA? DO FATO|EMBARGANTE|EMBARGTE|EXCIPIENTE|EXEQTE|EXEQUENTE|IMPETRANTE|IMPTTE|IMPUGNANTE|IMPUGTE|QUERELANTE|RECLAMANTE|RECONVINTE|RECORRENTE|REQTE|REQUERENTE")


    def __init__(self):
        #Descomentar o que for usar
        self.nome_corrigido_regex = []
        self.create_regex_nome_corrigido()

        self.regex_movimento_marcador = []
        self.create_regex_movimento_marcador()

        self.nome_classe_corrigido_regex = []
        self.create_regex_nome_classe_corrigido()

        self.nome_abreviado_regex = []
        self.create_regex_nome_abreviado()

        self.regex_tipo_anotacoes = []
        self.create_regex_tipo_anotacao_jucesp()

        self.regex_tipo_anotacoes_residual = []
        self.create_regex_tipo_anotacoes_residual()

        self.regex_cnae_residual = []
        self.create_regex_cnae_residual()

    def create_regex_cnae_residual(self):
        # self.regex_cnae_residual.append((re.compile("^BAR|LANCHONETE"), "5611", "LANCHONETE"))
        # self.regex_cnae_residual.append((re.compile("AUTO POSTO|POSTO DE GAS"), "4731", "POSTO DE GAS"))
        # self.regex_cnae_residual.append((re.compile("MINIMERCADO|MINI MERCADO|MINI-MERCADO"), "4712", "MINI MERCADO"))
        # self.regex_cnae_residual.append((re.compile("SUPERMERCADO|SUPER MERCADO|SUPER-MERCADO"), "4711", "SUPERMERCADO"))
        # self.regex_cnae_residual.append((re.compile("CABELEREIRO|MANICURE|PEDICURE|SALAO DE BELEZA"), "9602", "SALAO DE BELEZA"))
        # self.regex_cnae_residual.append((re.compile("COMERC.*ATACAD"), "46", "COMERCIO ATACADISTA"))
        # self.regex_cnae_residual.append((re.compile("COMERC.*VAREJ"), "47", "COMERCIO VAREJISTA"))
        # self.regex_cnae_residual.append((re.compile("COMERCIO"), "45", "COMERCIO"))
        # self.regex_cnae_residual.append((re.compile("EDUCACAO|ENSINO|ESCOLA|TREINAMENTO|CAPACITACAO|FORMACAO|APRENDIZA|(AUTO|MOTO) ESCOLA"),"85","EDUCACAO"))
        # self.regex_cnae_residual.append((re.compile("TRANSPORTE.*(MARITI?MO|AQUAVIARIO|CABOTAGEM|NAVAL|NAVEGA)"), "50", "TRANSPORTE MARITIMO"))
        # self.regex_cnae_residual.append((re.compile("TRANSPORTE.*(TERRESTR|RODOV|FERROV|MUDANCA)"), "49", "TRANSPORTE TERRESTRE"))
        # self.regex_cnae_residual.append((re.compile("FABRIC|INDUSTR|^CONFEC|^METALURG"), "10", "INDUSTRIA DE TRANSFORMACAO"))
        #self.regex_cnae_residual.append((re.compile("FABRIC|INDUSTR|^CONFEC|^METALURG"), "10"))
        self.regex_cnae_residual.append((re.compile("COMERCIO VARE.ISTA DE OUTROS PRODUTOS NAO ESPECIFICADOS ANTERIORMENTE"), "4789099"))
        self.regex_cnae_residual.append((re.compile("ATIVIDADES DE COBRANCAS E INFORMACOES CADASTRAIS"), "82911"))
        self.regex_cnae_residual.append((re.compile("COMERCIO VARE.ISTA DE MOVEIS ARTIGOS DE ILUMINACAO E OUTROS ARTIGOS PARA RESIDENCIA"), "47547"))
        self.regex_cnae_residual.append((re.compile("DESIGN DE INTERIORE"), "7410202"))
        self.regex_cnae_residual.append((re.compile("SERVICOS? DE COMUNICACAO MULTIMIDIA"), "6110803"))
        self.regex_cnae_residual.append((re.compile("COMERCIO ATACADISTA DE H?ORTIFRUTI"), "46338"))
        self.regex_cnae_residual.append((re.compile("TRANSPORTE RODOVIARIO DE CAR?- ?GA,? EXC"), "49302"))
        self.regex_cnae_residual.append((re.compile("T-? ?R-? ?E-? ?I-? ?N-? ?A-? ?M-? ?E-? ?N-? ?TO EM D-? ?E-? ?S-? ?E-? ?N-? ?V-? ?O-? ?L-? ?V-? ?I-? ?M-? ?E-? ?N-? ?T-? ?O PROF"),
                                         "85996"))
        self.regex_cnae_residual.append((re.compile("SUPORTE TECNICO, MANUTENCAO E OUTROS.*TEC"), "62091"))
        self.regex_cnae_residual.append((re.compile("TRANSPORTE RODOVIARIO COLETIVO DE PAS"), "49221"))
        self.regex_cnae_residual.append((re.compile("T-? ?R-? ?A-? ?T-? ?A-? ?M-? ?E-? ?N-? ?TO DE DA-? ?DOS,"), "63119"))
        self.regex_cnae_residual.append((re.compile("CABELEREIROS E OUTROS TRATAMENTOS"), "96025"))
        self.regex_cnae_residual.append((re.compile("SERVICO DE INSEMINACAO ARTIFICIAL.*ANIM"), "01628"))
        self.regex_cnae_residual.append((re.compile("SELECAO AGENCIAMENTO E LOCACAO DE MAO"), "78108"))
        self.regex_cnae_residual.append((re.compile("DECORACAO DE INTERIORES"), "74102"))
        self.regex_cnae_residual.append((re.compile("SERVICOS AUXILIARES A EDUCACAO"), "85503"))
        self.regex_cnae_residual.append((re.compile("SERVICOS DE MIXAGEM SONORA"), "59201"))
        self.regex_cnae_residual.append((re.compile("COMERCIO A VAREJO DE PECAS E ACESSORIOS NOVOS PARA MOTOCICLETAS E MOTONETAS"), "45412"))
        self.regex_cnae_residual.append((re.compile("REPARACAO E MANUTENCAO DE EQUIPAMENTOS ELETROELETRONICOS DE USO PESSOAL DOMESTICO"), "95215"))
        self.regex_cnae_residual.append((re.compile("COMERCIO ATACADISTA DE FIOS E FIBRAS"), "46893"))
        self.regex_cnae_residual.append((re.compile("CRIACAO E MONTAGEM DE ESTANDES PARA"), "73190"))
        self.regex_cnae_residual.append((re.compile("EDICAO DE CADASTROS, LISTAS E DE OUT"), "58191"))
        self.regex_cnae_residual.append((re.compile("FABRICACAO DE PRODUTOS DE PAPEL, CAR"), "17494"))
        self.regex_cnae_residual.append((re.compile(" PENSOES (ALOJAMENTO)|PENSOES"), "55906"))
        self.regex_cnae_residual.append((re.compile("TRANSPORTE RODOVIARIO DE CAR"), "49302"))
        self.regex_cnae_residual.append((re.compile("A-? ?T-? ?I-? ?V-? ?I-? ?D-? ?A-? ?D-? ?E M-? ?E-? ?D-? ?I-? ?CA A-? ?M-? ?B-? ?U-? ?L-? ?A-? ?T-? ?O-? ?R-? ?I-? ?AL"),"86305"))
        self.regex_cnae_residual.append((re.compile("COMERCIO A VAREJO DE AUTOMOVEIS.*NOVO"), "4511101"))
        self.regex_cnae_residual.append((re.compile("COMERCIO A VAREJO DE AUTOMOVEIS.*USAD"), "4511102"))
        self.regex_cnae_residual.append((re.compile("HOLDIN.*INST.*NAO.*FIN"), "6462000 "))
        self.regex_cnae_residual.append((re.compile("INC-? ?ORP.*EM-? ?PREE.*I-? ?MOB"), "4110700"))
        self.regex_cnae_residual.append((re.compile("S-? ?E-? ?R-? ?V-? ?I-? ?C-? ?O-? ?S C-? ?O-? ?M-? ?B-? ?I-? ?N-? ?A-? ?D-? ?OS DE ES-? ?C-? ?R-? ?I-? ?T-? ?O-? ?R-? ?IO "),"82113"))
        self.regex_cnae_residual.append((re.compile("COMERCIO.*VAREJ.*COMBUS"), "47318"))
        self.regex_cnae_residual.append((re.compile("COMERC.*VAREJ.*FARMAC"), "47717"))
        self.regex_cnae_residual.append((re.compile("COMERC.*VAREJ.*DISCOS E FITA"), "47628"))
        self.regex_cnae_residual.append((re.compile("COMERC.*VAREJ.*HORTIFR"), "47245"))
        self.regex_cnae_residual.append((re.compile("COMER.*VAREJ.*ART.*VESTU"), "47814"))
        self.regex_cnae_residual.append((re.compile("COM-? ?E-? ?R-? ?C.*VAR-? ?EJ.*AU-? ?TO-? ?M-? ?O-? ?V"), "45111"))
        self.regex_cnae_residual.append((re.compile("^RESTAURAN"), "56112"))
        self.regex_cnae_residual.append((re.compile("^BAR(ES)?"), "56112"))
        self.regex_cnae_residual.append((re.compile("SUVENIR|SOUVENI"), "47890"))
        self.regex_cnae_residual.append((re.compile("^ADM.*CONSORC"), "64930"))
        self.regex_cnae_residual.append((re.compile("^CORRET.*SEGURO"), "66223"))
        self.regex_cnae_residual.append((re.compile("^COMERC.*VAREJ.*ARTIG.*VEST"), "47814"))
        self.regex_cnae_residual.append((re.compile("^COMERC.*VAREJ.*COMBUSTIV"), "47318"))
        self.regex_cnae_residual.append((re.compile("^CABELERE"), "96025"))
        self.regex_cnae_residual.append((re.compile("^LANCHONETE"), "56112"))
        self.regex_cnae_residual.append((re.compile("^MERCEARIA"), "47121"))
        self.regex_cnae_residual.append((re.compile("^COMER.*VAREJ.*MAQUINAS.*EQUIP.*MATER.*INFORMATICA"), "47512"))
        self.regex_cnae_residual.append((re.compile("^MINIMERCADO"), "47121"))
        self.regex_cnae_residual.append((re.compile("^DESENV.*SOFTW.*ENCOME"), "62015"))
        self.regex_cnae_residual.append((re.compile("^EDIFICA"), "41204"))
        self.regex_cnae_residual.append((re.compile("^PADARIA"), "10911"))
        self.regex_cnae_residual.append((re.compile("^COMERCIO.*VAREJ.*OUTR.*UTIL.*DOMES"), "47598"))
        self.regex_cnae_residual.append((re.compile("^CHOPERIA"), "56112"))
        self.regex_cnae_residual.append((re.compile("^OUTROS SERVICOS.*PRINCIPAL.*EMPRESA"), "82997"))
        self.regex_cnae_residual.append((re.compile("^SERV.*MANUT.*AUTOMO"), "45200"))
        self.regex_cnae_residual.append((re.compile("^COMER.*VAREJ.*PERFUM"), "47725"))
        self.regex_cnae_residual.append((re.compile("^COM.*VAREJ.*OUTR.*PRODUTO.*NAO ESPEC"), "47890"))
        self.regex_cnae_residual.append((re.compile("^COM.*VAREJ.*PECAS.*NOVO.*AUTOMO"), "45307"))
        self.regex_cnae_residual.append((re.compile("^COM.*VAREJ.*PECAS.*USAD.*AUTOMO"), "45307"))
        self.regex_cnae_residual.append((re.compile("^ALOJA.*ANIMA"), "96092"))
        self.regex_cnae_residual.append((re.compile("^COM.*VAREJ.*BEBIDA"), "47237"))
        self.regex_cnae_residual.append((re.compile("^(ATIV|SERV).*PSICOL"), "86500"))
        self.regex_cnae_residual.append((re.compile("^HOTEL"), "55108"))
        self.regex_cnae_residual.append((re.compile("^CONSULTOR.*TEC.*INF"), "62040"))
        self.regex_cnae_residual.append((re.compile("^COBRAN.*CADAST"), "82911"))
        self.regex_cnae_residual.append((re.compile("^RESTAURANTE|^BAR"), "5611"))
        self.regex_cnae_residual.append((re.compile("(^CONSULTORIO|^CLINICA).*VET"), "7500"))
        self.regex_cnae_residual.append((re.compile("(FISIO|FONOAUD|PSICOL|PSICANA)"), "8650"))
        self.regex_cnae_residual.append((re.compile("^COMERCIO VAREJISTA DE (ROUPA|ARTIGOS? D[OE] VEST)"), "4781"))
        self.regex_cnae_residual.append((re.compile("COMERC.*VAREJ"), "47"))
        self.regex_cnae_residual.append((re.compile("COMERC.*ATACAD"), "46"))
        self.regex_cnae_residual.append((re.compile("TRANSPORTE.*(TERRESTR|RODOV|FERROV|MUDANCA)"), "49"))
        self.regex_cnae_residual.append((re.compile("TRANSPORTE.*(MARITI?MO|AQUAVIARIO|CABOTAGEM|NAVAL|NAVEGA)"), "50"))
        self.regex_cnae_residual.append((re.compile("COMERCIO"), "45"))

    def create_regex_movimento_marcador(self):
        '''
        Posição 0 é o regex de match
        Posição 1 é o regex de negação
        Posição 2 é o nome do marcador
        '''
        self.regex_movimento_marcador.append((re.compile('(((\\bDETERMINO\s*\w.{0,50}|\\bDEF(?:IRO|ERINDO-SE|ERIU)\s*(?:A|O)?\s*(?:PEDIDO)?\s*(?:D[OEA]S?)?\s*)(?:PROCESSAMENTO)\s*(?:D[OEA]S?)?\s*(?:PRESENTE)?\s?(?:PEDIDO)?\s*(?:D[OEA]S?)?\s*(?:REC\.?(?:UPERACAO)?\s*JUD\.?(?:ICIAL)?|CONCORDATA)?)|(\\bDEF[EI]R(?:O|IU)[\,\s]+(EM\s*FAVOR\s*D[AEO]S?)?.{0,50}A?\sRECUPERACAO\sJUDICIAL)).*?(COMO\s*ADMINISTRADOR(?:A)?\s*JUDICIAL.{1,250}NOMEIO|NOMEIO\s*COMO\s*ADMINISTRADOR(?:A)?\s*JUDICIAL)'), re.compile('((?:INDEF[EI]R(?:O|IU))\s*(?:A|O)?\s*(?:PEDIDO)?\s*(?:D[OEA]S?)?\s*(?:PROCESSAMENTO)\s*(?:D[OEA]S?)?\s*(?:PEDIDO)?\s*(?:D[OEA]S?)?\s*(?:REC\.?(?:UPERACAO)?\s*JUD\.?(?:ICIAL)?|CONCORDATA)?)|(INDEF[EI]R(?:O|IU)[\,\s]+(EM\s*FAVOR\s*D[AEO]S?)?.{0,50}A?\sRECUPERACAO\sJUDICIAL)'), 'deferimento_processamento'))
        self.regex_movimento_marcador.append((re.compile('((CONCEDO|HOMOLOGO|DECLAR(A\-SE|O))\s*(ABERT[OA])?\s*[AO]?\s*(PEDIDO)?\s*(D[OEA])?\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA)(\W|$))|((HEI\s*POR\s*BEM|(PARA))\s*CONCEDER\s*A\s*CONCORDATA(\W|$))|(((JULGO\s*PROCEDENTE\s*O\s*PEDIDO)|((APROVO|HOMOLOGO)\s*O\s*PLANO\s*(APRESENTADO)?))\s*\,?\s*((PARA\s*CONCEDER)|(CONCEDO))\s*[OA]?\s*(PEDIDO)?\s*(D[OEA])?\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA)(\W|$))|((HOMOLOGO(\s*A\s*APROVACAO)?|APROVO)\s*D?O?\s*PLANO\s*DE\s*REC\.?(UPERACAO)?\s*(JUD\.?(ICIAL)?)?)|((HOMOLOGO|CONCEDO).{0,180}(COM|NOS)?\s*(BASE|FULCRO|FUNDAMENTO|TERMOS)?\s*([DN][OA])?\s*ART\.?(IGO)?\s*58(\D|$))|((COM|NOS)?\s*(BASE|FULCRO|FUNDAMENTO|TERMOS)?\s*([DN][OA])?\s*ART\.?(IGO)?\s*58.{0,80}(HOMOLOGO|CONCEDO))'), re.compile(''), 'concessao'))
        self.regex_movimento_marcador.append((re.compile('((CONVOLO|((PROCEDO|DETERMINO|DECRETO|DECLARO)\s*A?\s*CONVOLA(CAO|DA))|(DECLARO\s*CONVOLAD[OA]))\W(EM\s*FALENCIA)?\s*(O\s*PEDIDO\s*DE)?\s*(O\s*PROCESSO\s*DE)?\s*(D?A?\s*(PRESENTE)?\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA))?\s*(EM\s*FALENCIA)?)|(POR\s*CONVOLACAO.{0,10}(DECLARO\s?(ABERTA)?|DECRETO)\s?A\s*FALENCIA)|((DECRETO|DEFIRO|DETERMINO|ORDENO|DECLARO)\s*A\s*CONVOLACAO)|((DECRETO\s*A\s*FALENCIA)\s*(.{0,25})?(POR\s*CONVOLACAO))|(HEI\s*POR\s*BEM\s*(DE)?\s*CONVOLAR\s*A\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA))|(RESCINDO\s*A\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA))|(ACOLHO\s*OS?\s*PEDIDOS?\s*PARA\s*CONVOLAR\s*(A|EM)\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA))|(DOU\s*POR\s*CONVOLAD[OA])|((RESCINDIR\s*A\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA))\s*(.{0,30})?\s*DECRETAR\s*A\s*((QUEBRA)|(FALENCIA)))|((DECRETO|DEFIRO|DETERMINO|ORDENO)\,?\s*(COM|NOS)?\s*(BASE|FULCRO|FUNDAMENTO|TERMOS)?\s*(NOS\s*TERMOS)?\s*([DN][OA])?\s*ART\.?(IGO)?\s*(73).{0,30}\s*(QUEBRA|FALENCIA))|((DECRETO|DEFIRO|DETERMINO|ORDENO)\,?\s*A?\s*(QUEBRA|FALENCIA).{0,60}\s*(COM|NOS)?\s*(BASE|FULCRO|FUNDAMENTO|TERMOS)?\s*(NOS\s*TERMOS)?\s*([DN][OA])?\s*ART\.?(IGO)?\s*(73))|((BASE|FULCRO|FUNDAMENTO|(NOS)?TERMOS)\s*(NOS\s*TERMOS)?\s*([DN][OA])?\s*ART\.?(IGO)?\s?(56)\,?\s*(PAR\w*\.?)?\§?\s*4)|((JULGO|DECLARO|DETERMINO|DECRETO)\s*PROCEDENTE\s*O\s*PEDIDO\s*PARA\s*CONVOLAR\s*A\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA))|(HIPOTESE\s*DE\s*CONVOLACAO\s*D\w*\s*((REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?)|CONCORDATA).*JULGO\s*ABERTA.{0,60}FALENCIA\s*DE)'), re.compile(''), 'convolacao'))
        self.regex_movimento_marcador.append((re.compile('((DETERMINO|DECLARO|JULGO|DECRETO|FICA\s*DETERMINADA)\s*(ABERTA)?\s*A?\s*(QUEBRA|FALENCIA))|((DETERMINO|DECLARO|JULGO|DECRETO|(FICA\s*DETERMINADA))\s?(ABERTA)?\,?\s?((NO\s*DIA\s*DE\s*)?HOJE|NESTA\s*DATA)?\s*\,?\s*((AS)\s*[0-9]{1,2}\:?[0-9]{1,2}\s*(H|HS|HORAS)?)?\s*\,?\s*(SU)?A?\s*(QUEBRA|FALENCIA))|((PARA)?\s*JULG(O|AR)\s*PROCEDENTE\s*[OA]?\s*(PEDIDO)?\s*(D?A\s*ACAO)?\s*(PARA|E)\s*(DECRETAR|DECLARAR|PROCLAMAR)\s*A\s*(FALENCIA|QUEBRA)\s*D[OEA])|((BASE|FULCRO|FUNDAMENTO|(NOS)?TERMOS)\s*(NOS\s*TERMOS)?\s*([DN][OA])?\s*ART\.?(IGO)?\s?(94)\D.{0,100}(DETERMINO|DECLARO|JULGO\sPROCEDENTE|DECRETO|FICA\s*DETERMINADA))|((DETERMINO|DECLARO|JULGO\sPROCEDENTE|DECRETO|FICA\s*DETERMINADA).{0,100}(BASE|FULCRO|FUNDAMENTO|(NOS)?TERMOS)\s*(NOS\s*TERMOS)?\s*([DN][OA])?\s*ART\.?(IGO)?\s?(94)\D)'), re.compile('((DECLARO)\s*A\s*FALENCIA\sENCERRADA)|(ENSEJ\w*\s*[OA]?\s*(DECRETO)?\s*(DE|A)?\s*FAL(ENCIA|IMENTAR))'), 'decretacao_falencia'))
        self.regex_movimento_marcador.append((re.compile('((JULGO|DECLAR[OA](\-SE)?|DECRETO|DETERMINO|PROCLAMO|ANUNCIO)\s*[OA]?\s*(CUMPRI(D[OA]|MENTO)|ENCERRA(D[OA]|MENTO))\s*D?[OA]?\s*(PROCESSO\sDE|PRESENTE)?\s*(REC\.?\w*\s*JUD\.?\w*|CONCORDATA))|((JULGO|DECLAR[OA](\-SE)?|DECRETO|DETERMINO|PROCLAMO|ANUNCIO)\s*[OA]?\s*(ENCERRA(D[OA]|MENTO)|EXTINT[OA]|CUMPRI(D[OA]|MENTO))\s*(D?[OA])?\s*(PRESENTE)?\s*(PROCESSO|FEITO|LIDE|DEMANDA|PROCEDIMENTO)?\s*(D[EOA])?\s*(REC\.?\w*\s*JUD\.?\w*|CONCORDATA)(\s*(D[EOA])?.{0,180}(DE\s*ACORDO|EM\s*CONSONANCIA|CONSOANTE|CONFORME|COM|NOS?|NA)\s*[AO]*\s*(DISPOSTO|FUNDAMENTO|ESTEIO|FULCRO|BASE|ARRIMO|TERMOS|MOLDES|FORMA)\s*[NDE][EOA]S?\s*(QUANTO\s*DISPOE|DISPOSTO|REFERIDO|ANTIGO)?\s*([NDE]?[EOA]S?)?\s*ARTS?\.?(IGOS?)?\s*(61)?\s*\,?\s*(CAPUT)?\s*\,?\s*E?\s*(63|61|155)))|(((DE\s*ACORDO|EM\s*CONSONANCIA|CONSOANTE|CONFORME|COM|NOS?|NA)\s*[AO]*\s*(DISPOSTO|FUNDAMENTO|ESTEIO|FULCRO|BASE|ARRIMO|TERMOS|MOLDES|FORMA)\s*[NDE][EOA]S?\s*(QUANTO\s*DISPOE|DISPOSTO|REFERIDO|ANTIGO)?\s*([NDE]?[EOA]S?)?\s*ARTS?\.?(IGOS?)?\s*(61)?\s*\,?\s*(CAPUT)?\s*\,?\s*E?\s*(63|61|155)).{0,180}(JULGO|DECLAR[OA](\-SE)?|DECRETO|DETERMINO|PROCLAMO|ANUNCIO)\s*[OA]?\s*(ENCERRA(D[OA]|MENTO)|EXTINT[OA]|CUMPRID[OA])\s*(D?[OA])?\s*(PRESENTE)?\s*(PROCESSO|FEITO|LIDE|DEMANDA|PROCEDIMENTO)?\s*(D[EOA])?\s*(REC\.?\w*\s*JUD\.?\w*|CONCORDATA))'), re.compile(''), 'encerramento_por_cumprimento_do_plano'))


    def create_regex_tipo_anotacao_jucesp(self):
        self.regex_tipo_anotacoes.append((re.compile("TRATA-? ?SE ?DE ?REQUERIMENTO|ANOTACAO DE [0-9]* PROT(OCOL[OA])?(D[OA])? ?N? [0-9]* REQ"),"requerimento_jucesp"))
        self.regex_tipo_anotacoes.append((re.compile("(ABERT\w*|INSTALA\w+|CRIACAO)(.{0,50}?(POSTO|BANCO|CAIXA).{0,50}?\s*(24\s*HORAS|(ATEND)?.{0,50}?ELETRON)|\s*D[EOA]S?\s*(UM)?\s*P\.?A\.?E\.?\,?\\s*SITU)|INSTALACAO\s*PAES\s*PAE"),"Abre_posto_24h"))
        self.regex_tipo_anotacoes.append((re.compile("(FECHA|DESINSTALA|ENCERRA|DESATIV|CANCELA|EXTINCAO).{0,50}?\s*(P\.?A\.?E\.?|(POSTO|BANCO|CAIXA).{0,50}?\s*(24 HORAS|(ATEND.{0,50}?\s*)?ELETRON))"),"Fecha_posto_24h"))
        self.regex_tipo_anotacoes.append((re.compile("ENCERRA.{0,50}?\s*(P\.?A\.?B\.?|POSTO\s*(DE)?\s*ATENDIMENTO.{0,5}?\s*BANCARIO)"), "Fecha_posto_banco"))
        self.regex_tipo_anotacoes.append((re.compile("(ABERT|INSTALA|CRIACAO).{0,50}?[\s*\-](POSTO).{0,50}?\s*((ATEND)?.{0,50}?BANCARIO|PAB)|(INSTALACAO|ABERTURA)\s*D[EOA]S?\s*(UM)\s*PAB"), "Abre_posto_banco"))
        self.regex_tipo_anotacoes.append((re.compile("(?:INSTALACAO|ABERTURA)\s*D[EO]S?\s*(?:PABS?|POSTOS?\s*(?:PABS?|DE\s*ATENDIMENTO\s*BANCARIO))"),"Abre_posto_banco"))
        self.regex_tipo_anotacoes.append((re.compile("(?:ABERTURA|INSTALACAO)\s*D[EO]S?\s*(?:PAES?|POSTOS?\s*(?:PAES?|DE\s*ATENDIMENTO\s*ELETRONICO))"),"Abre_posto_24h"))
        self.regex_tipo_anotacoes.append((re.compile("(?:ABERTURA|INSTALACAO)\s*D[EO]S?\s*(?:POSTOS?\s*DE\s*ATENDIMENTO)"), "Abre_posto_atendimento"))
        self.regex_tipo_anotacoes.append((re.compile("(?:ADMIT(?:[EI]\-?(?:SE)?|ID[AO]S?|IR).{0,3}?|ADMISS)(?:\s*NAS?\s*SOCIEDADES?|.{0,250}?.{0,150}?\s*(?:COM\s*(?:VALOR\s*(?:D[AE]|NA)S?\s*)?PARTICIPACAO|\s*(?:COMO|[AO]S?)\s*SOCI[OA]S?)|.{0,250}?.{0,150}?\s*(?:SOCIEDADE\s*CONSTITUIDA|(?:NA\s*SITUACAO|OCUPANDO\s*O\s*CARGO)\s*DE\s*SOCIOS?))"),"Socio_admitido"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO\s*DO\s*NOME\s*(COMERCIAL|EMPRESARIAL)"),"Altera_nome_coml_empresarial"))
        self.regex_tipo_anotacoes.append((re.compile("(?<!DES)ENQUADRAMENTO.{0,50}?\s*(PEQUENO PORTE|E\.?P\.?P\.?)"), "Enquadramento_EPP"))
        self.regex_tipo_anotacoes.append((re.compile("(?<!DES)ENQUADRAMENTO.{0,50}?\s*(MICROEMPRESA|M\.?E\.?$)"), "Enquadramento_ME"))
        self.regex_tipo_anotacoes.append((re.compile("(?<!DES)ENQUADRAMENTO.{0,50}?\s*(MICRO\*sEMPREENDEDOR INDIVIDUAL|M\.?E\.?I\.?)"), "Enquadramento_MEI"))
        self.regex_tipo_anotacoes.append((re.compile("DESENQUADRA.{0,50}?\s*(MICRO\s*EMPREENDEDOR\s*INDIVIDUAL|M\.?E\.?I\.?|S\.?I\.?M\.?E\.?I\.?|MICRO\s*EMPRESA)"),"Desenquadramento_MEI"))
        self.regex_tipo_anotacoes.append((re.compile("DESENQUADRA.{0,50}?\s*(EMPRESA\s*DE\s*PEQUENO\s*PORTE|E\.?P\.?P\.?)"),"DESENQ_EPP"))
        self.regex_tipo_anotacoes.append((re.compile("(CANCELAMENTO|ENCERRAMENTO)\s*DESTA"), "Cancelamento_desta"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO\s*D[EA]\s*ATIVIDADE\s*ECONOMICA"), "Altera_objeto_social"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO.{0,50}?\s*DADOS.{0,50}?\s*CADASTRAIS"), "Altera_dados_cadastrais"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO.{0,50}?\s?SOCIOS.{0,50}?\s*DIRETORIA"), "Altera_socios_diretoria"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERA(?:CAO|R)\s*(?:D[OE]|O)\s*CAPITAL\s*(?:SOCIAL)?"), "Altera_capital"))
        self.regex_tipo_anotacoes.append((re.compile("(?:TRANSFORMACAO|ALTERA\-?\s*SE).{0,50}?\s*(?:TIPO|NATUREZA).{0,50}?\s*JURIDIC[OA]"), "Transformacao_tipo_juridico"))
        self.regex_tipo_anotacoes.append((re.compile("ADEQUACAO.{0,50}?\s*CODIGO\s*CIVIL"), "Adequacao_Codigo_Civil"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DE\s*OUTROS"), "Arquiv_outros"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DE\s*OFICIO"), "Arquiv_oficio"))
        self.regex_tipo_anotacoes.append((re.compile("CORRECAO.{0,50}?\s*INSCRICAO.{0,50}?\s*ESTADUAL"), "Correcao_inscricao_estadual"))
        self.regex_tipo_anotacoes.append((re.compile("REMANESCENTE"), "Remanescente_socio"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO\s*DE\s*PRAZO\s*DE\s*DURACAO\s*DA\s*EMPRESA"), "Altera_prazo_duracao_empresa"))
        self.regex_tipo_anotacoes.append((re.compile("(SOC|PERMANECERA).{0,50}?\s*UNIPESSOAL.{0,50}?\s*PRAZO"), "Unipessoal_prazo_fixo"))
        self.regex_tipo_anotacoes.append((re.compile("(ARQUIVA(DO|MENTO)|REGISTRO)\s*(D[EO]S?)?\s*(BAL|DEMONSTR|D\.?R\.?E\.?|B\.?P\.?)|^BALANCO PATR|^(DEMONSTRAC|D\.?R\.?E\.?)"),"Arquiv_balanco"))
        self.regex_tipo_anotacoes.append((re.compile("ARQ(UIVAMENTO)?\s*DE\s*(DOC|BALANCO|DEMONSTRAC|DRE)"), "Arquiv_balanco"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DE\s*A\.?\s*G\.?\s*O\.?"), "AGO"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DE\s*A\.?\s*G\.?\s*E\.?"), "AGE"))
        self.regex_tipo_anotacoes.append((re.compile("DISTRATO\s*SOCIAL"), "Distrato_social"))
        self.regex_tipo_anotacoes.append((re.compile("^OUTORG"), "Outorgas"))
        self.regex_tipo_anotacoes.append((re.compile("INCLUSAO\s*CNPJ\s*FILIAL"), "Inclusao_cnpj_filial"))
        self.regex_tipo_anotacoes.append((re.compile("INCORPORADA\s*(POR|PELO)"), "Incorporacao_por"))
        self.regex_tipo_anotacoes.append((re.compile("INCORPORACAO\s*D[EO]"), "Incorporacao_de"))
        self.regex_tipo_anotacoes.append((re.compile("AUMENT(O|AR)\s*(D[OE])?O?\s*CAPITAL\s*(SOCIAL)?\s*(DA\s*(SEDE|SOCIEDADE))?,?\s*(PARA|DE)"),"Aumento_capital"))
        self.regex_tipo_anotacoes.append((re.compile("RENUNCI"),"Renuncias"))  # CARTA RENUNCI é um bom regex, mas perdemos algumas anotações possíveis
        self.regex_tipo_anotacoes.append((re.compile("TRANSFER(ENCIA|IR)\s*(D?[EA]S?)?\s*FILIA(L|IS)"), "Transferencia_filial"))
        self.regex_tipo_anotacoes.append((re.compile("ENCERRA.{0,50}?\s*FILIA(L|IS)"), "Encerramento_filial"))
        self.regex_tipo_anotacoes.append((re.compile("CESSAO\s*(E\s*TRANSFERENCIA)?\s*D[EA]S?\s*(ACOES|(C|QU)OTAS)|ACORDO\s*DE\s*TRANSFERENCIA\s*DE\s*ACOES"),"Cessao_acoes"))
        self.regex_tipo_anotacoes.append((re.compile("\\bCISAO\s*TOTAL\s*DESTA|^CISAO.{0,50}?\s*TOTAL"), "Cisao_total"))
        self.regex_tipo_anotacoes.append((re.compile("CONSTITUIDA\s*POR\s*CISAO"), "Constituida_cisao_parcial"))
        self.regex_tipo_anotacoes.append((re.compile("ABERTURA\s*(DE)?\s*NIRE\s*PROVISORIO"), "Abertura_nire_provisorio"))
        self.regex_tipo_anotacoes.append((re.compile("ABERTURA\s*(D[EA])?S?\s*(UMA?)?\s*FILIA(L|IS)"), "Abertura_filial"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERA(CAO|\-SE)\s*(D[OE]|O)S?\s*ENDERECOS?\s*(D[EA])?S?\s*FILIA(L|IS)"), "Altera_endereco_filial"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERA(CAO|\-SE)\s*(D[OE]|O)S?\s*ENDERECO"), "Altera_endereco"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERA(CAO|\-SE)\s*(D[AE]|A)S?\s*ATIVIDADES?\s*D[EA] FILIAL"), "altera_objeto_filial"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERA(CAO|\-SE)\s*(D[OE]|O)\s*CAPITAL\s*D[EA]\s*FILIAL|^CAPITAL.{0,50}?\s*FILIAL.{0,50}?\s*ALTER"),"Altera_capital_filial"))
        self.regex_tipo_anotacoes.append((re.compile("ALTER.{0,50}?\s*CAPITAL D[EA]\s*SEDE\s*PARA|CAPITAL\s*D[EA]\s*SEDE\s*ALTERA"), "Altera_capital_sede"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DE\s*A\.?R\.?C\.?A\.?"), "ARCA"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DE\s*A\.?R\.?D\.?"), "ARD"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DE\s*A\.?R\.?Q\.?"), "ARQ"))
        self.regex_tipo_anotacoes.append((re.compile("TRATA(\-|\s*)?SE\s*DE\s*(OFICIO|DECISAO|MANDADO|SENTENCA|REQUERIMENTO)"), "Trata_se_de_oficio"))
        self.regex_tipo_anotacoes.append((re.compile("MANDADO\s*D[EA]\s*PENHORA"), "Mandado_penhora"))
        self.regex_tipo_anotacoes.append((re.compile("(ARQ\.?|RQUIVAMENTO)\s*DE\s*PROCURACAO"), "Arquiv_procuracao"))
        self.regex_tipo_anotacoes.append((re.compile("CARTA\s*RENUNCIA"), "Carta_renuncia"))
        self.regex_tipo_anotacoes.append((re.compile("(CONSOLIDACAO\s*D[EO]S?\s*(CONTRATO|ESTAT?UTO)\s*SOCIAL)|(ESTATUTO\s*SOCIAL\s*CONSOLIDADO)"),"Consolidacao_estatuto"))
        self.regex_tipo_anotacoes.append((re.compile("CONSOLIDACAO.{0,50}?\s*[DN]A\s*MATRIZ"), "Consolidacao_matriz"))
        self.regex_tipo_anotacoes.append((re.compile("PARALI[ZS]ACAO\s*TEMPORARIA"), "Paralizacao_temporaria"))
        self.regex_tipo_anotacoes.append((re.compile("SEDE\s*TRANSFERIDA"), "Sede_transferida"))
        self.regex_tipo_anotacoes.append((re.compile("RE(\-|\s*)?RATIFICACAO|RERATIFI\s*CACAO"), "Re_ratificacao"))
        self.regex_tipo_anotacoes.append((re.compile("TRANSFORMACAO\s*DEST[AE]"), "Transformacao_para"))
        self.regex_tipo_anotacoes.append((re.compile("TRANSFORMADA\s*DE"), "Transformacao_de"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DE\s*ATA|A\.R\.Q\.U\.I\.V\.A\.M\.E\.N\.T\.O\s*DE\s*ATA"), "Arquiv_ata"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIVAMENTO\s*DATADO\s*DE\:?"), "Arquiv_nao_especificado"))
        self.regex_tipo_anotacoes.append((re.compile("REVISAO\s*EX(\-|\s*)?OFFICIO"), "Revisao_ex_officio"))
        self.regex_tipo_anotacoes.append((re.compile("TRANSFORMADA\s*PARA\s*SOCIEDADE\s*CIVIL"), "Transformada_SC"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO\s*DE\s*AUTORIZACAO\s*GOVERNAMENTAL"), "Altera_autoriz_govern"))
        self.regex_tipo_anotacoes.append((re.compile("^ABERTURA\s*DE\s*NIRE\s*FILIAL"), "Abertura_NIRE_filial"))
        self.regex_tipo_anotacoes.append((re.compile("REDISTRIBUICAO\s*DAS\s*QUOTAS\s*DE"), "Redistribuicao_quotas"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERADO\s*O\s*CAPITAL\s*SOCIAL|CAPITAL\s*SOCIAL\s*ALTERADO"), "Altera_capital"))
        self.regex_tipo_anotacoes.append((re.compile("(BALANCO\s*PATRIMONIAL|BALANCETE)"), "Arquiv_balanco"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERAR\s*O?\s*ENDERECO\s*D[EA]\s*(SUA)?\s*SEDE"), "Altera_capital_sede"))
        self.regex_tipo_anotacoes.append((re.compile("RAZAO\s*SOCIAL\s*ALTERADA\s*PARA"), "Altera_razao_social"))
        self.regex_tipo_anotacoes.append((re.compile("ADMIT.{0,50}?\s*DIRETOR"), "Diretor_admitido"))
        self.regex_tipo_anotacoes.append((re.compile("ADMIT.{0,50}?\s*ADMINISTRADOR|ADMINISTRACAO\s*D[EA]\s*SOCIEDADE"), "Admin_admitido"))
        self.regex_tipo_anotacoes.append((re.compile("ARMAZE(NS|M)\s*GERA(IS|L)"), "Armazens_gerais"))
        self.regex_tipo_anotacoes.append((re.compile("^.?ARQUIVAMENTO\s*SUSPENSO|SUSPENSAO\s*DE\s*ARQUIV|DOCUMENTO\s*SUSPENSO"), "Arquiv_suspenso"))
        self.regex_tipo_anotacoes.append((re.compile("ALTER.{0,50}?\s*NOME\s*COMERCI"), "Altera_nome_coml_empresarial"))
        self.regex_tipo_anotacoes.append((re.compile("ALTER.{0,50}?\s*CAPITAL\s*D[EA]\s*SEDE\s*PARA|CAPITAL\s*D[EA] SEDE ALTERA"), "Altera_capital_sede"))
        self.regex_tipo_anotacoes.append((re.compile("ENDERECO\s*D[EA]\s*FILIAL.{0,50}?\s*ALTERADO|ALTER.{0,50}?\s*ENDERECO D[EA]\s*FILIAL"), "Altera_endereco_filial"))
        self.regex_tipo_anotacoes.append((re.compile("NOME(AN?D[OA]|OU|AR)\s*(.{0,70}?)?\s*(ADMINISTRADOR[OAE]S?\s*JUDICIA(L|IS)|SINDICO)"), "Nomeado_sindico"))
        self.regex_tipo_anotacoes.append((re.compile("B\.?A\.?\s*(\=|[0-9])"), "Bloqueio_admin"))
        self.regex_tipo_anotacoes.append((re.compile("^CORRECAO"), "Correcoes"))
        self.regex_tipo_anotacoes.append((re.compile("^COMUNICACAO\s*DE\s*FUNCIONAMENTO"), "Comunica_funcionam"))
        self.regex_tipo_anotacoes.append((re.compile("^DESTIT.{0,50}?\s*DIRETOR"), "Destit_diretor"))
        self.regex_tipo_anotacoes.append((re.compile("^DESTIT.{0,50}?\s*ADMINISTRADOR"), "Destit_adm"))
        self.regex_tipo_anotacoes.append((re.compile("^DESTIT.{0,50}?\s*CONSELH"), "Destit_conselh"))
        self.regex_tipo_anotacoes.append((re.compile("TRANSFORMACAO DESTA"), "Transformacao"))
        self.regex_tipo_anotacoes.append((re.compile("^CITADO"), "Citado"))
        self.regex_tipo_anotacoes.append((re.compile("(ELEITO|ELEICAO\s*D[OE]).{0,50}?\s*(COMO)?\s*DIRETOR\s*PRESIDENTE"), "Eleicao_diretor_presid"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERA(DO|R|CAO)\s*D?O?\s*ENDERECO\s*D[EA]\s*(SUA)?\s*SEDE|ENDERECO\s*D[EA]\s*(SUA)?\s*SEDE\s*ALTERADO"), "Altera_endereco_sede"))
        self.regex_tipo_anotacoes.append((re.compile("ENCERR(AMENTO|OU|AR)\s*D?[EAO]\s*(PROCESSO)?\s*(DE)?\s*FALENCIA"), "falencia_encerramento"))
        self.regex_tipo_anotacoes.append((re.compile("ESTENDIDOS?\s*OS?\s*EFEITOS?\s*DA\s*(QUEBRA|FALENCIA)|^FALENCIA|(DECRET(ADA|OU)|HOUVE\s*DECRETACAO|ABERTA|CONVOL(ADA|OU|CAO|R)|ABR(IU|R)|ABERTURA|DECLAR(ADA|OU|R))\s*(SU|D)?[EOA]?(EM)?\s*(QUEBRA|FALENCIA)|(QUEBRA|FALENCIA).{0,50}?FOI (DECRETADA|ABERTA|DECLARADA)"),"Falencia_decreta"))#deixar falencia_decreta
        self.regex_tipo_anotacoes.append((re.compile("ENCERRAMENTO\s*DE\s*FALENCIA"), "falencia_encerramento"))#virar falencia_encerramento
        self.regex_tipo_anotacoes.append((re.compile("(DEFERI(DO|IU|R|MENTO))\s*O\s*PROCESSAMENTO\s*DA\s*RECUP|DEFERI(DA|R|IU)\s*A\s*RECUPERACAO\s*JUD"), "RecJud_defproc"))
        self.regex_tipo_anotacoes.append((re.compile("CONCED.*?RECUPERACAO\s*JUD|(APROVADO|HOMOLOGADO).*?(PLANO\s*DE\s*RECUPERACAO\s*JUDICIAL|PRJ)|COM\s*(FUNDAMENTO|FULCRO|BASE)\s*NO ART\.?(IGO)?\s*58.*?11\.?101"),"RecJud_conced"))
        self.regex_tipo_anotacoes.append((re.compile("ENCERR(AMENTO|OU|AR)\s*D?[EAO]\s*(PROCESSO)?\s*(DE)?\s*(REC\.?(UPERACAO)?\s*JUD\.?(ICIAL)?|RECUPERACIONAL)"),"RecJud_Encerramento"))
        self.regex_tipo_anotacoes.append((re.compile("ESTENDIDOS?\s*OS?\s*EFEITOS?\s*DA\s*(RECUPERACAO\s*JUDICIAL)"),"RecJud_estende_efeito"))
        self.regex_tipo_anotacoes.append((re.compile("REVOG(ACAO|OU|AD[OA]).*?FALENCIA|FOI\s*REVOGAD[OA]\s*[OA]\s*(FALENCIA|O\s*DECRETO\s*(FALIMEN|DE\s*FALEN))"), "falencia_Revogacao"))
        self.regex_tipo_anotacoes.append((re.compile("(REVOG|ANUL)((O|(AR|ACAO)|(A(D[OA])?\-SE)))\s*D?[EOA]?\s*(DECRET(O|ACAO))?\s*D?[EOA]?\s*(FALENCIA|FALIMENTAR)|HOMOLOGO\s*O\s*ACORDO\s*(CELEBRADO)?\,?\s*REVOGANDO\s*O\s*DECRETO\s*(D[EA])?\s*(QUEBRA|FALENCIA|FALIMENTAR)|LEVANTO\s*A\s*FALENCIA\s*OUTRORA\s*DECRETADA"), "falencia_Revogacao"))
        self.regex_tipo_anotacoes.append((re.compile("REVOGACAO.*?FALENCIA|FOI\s*REVOGADA\s*A\s*FALENCIA"), "falencia_Revogacao"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO\s*INCLUSAO\s*(DE\s*CGC|INSCRICAO\s*ESTADUAL)"), "Altera_inclusao_CGC"))
        self.regex_tipo_anotacoes.append((re.compile("PONTA\s*DE\s*CADEIA|ANULD.\s*POR\s*FRAUDE|CANCELADO\s*POR\s*MULTIPLICIDADE\s*DE\s*INSCRICAO|CANCELAMENTO\s*DO\s*CPF|FOI\s*ALTERADO\s*O\s*CPF\s*DO\s*SOCIO"),"CPF_cancela"))
        self.regex_tipo_anotacoes.append((re.compile("5\s*DO\s*ART\.?\s*(IGO)?\s*64\s*DA\s*LEI\s*?N?\.?\s*9\.?532|ARROLA"), "Arrola_bens"))
        self.regex_tipo_anotacoes.append((re.compile("(PENHORA|ARREST|SEQUESTR|INDISPONI|CONSTRICAO).*?(COTAS|QUOTAS|QUINHAO|PARTICIP)"), "Indisponib_cotas"))
        self.regex_tipo_anotacoes.append((re.compile("DISSOLUCAO|LIQUIDACAO"), "Dissolucao_liquid_judicial"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO.*?(OBJET(O|IVO)\s*SOCIAL|ATIVIDADE)"), "Altera_objeto_social"))
        self.regex_tipo_anotacoes.append((re.compile("ANOTACAO.*JUIZ|OFICIO.*JUIZ|PENDENCIA\s*JUDICIAL"), "Anotacao_processo"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIV\.?(AMENTO)?.*ARCA"), "ARCA"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIV\.?(AMENTO)?.*ARD"), "ARD"))
        self.regex_tipo_anotacoes.append((re.compile("DESENQ.*(MICRO|\s*ME)"), "Desenq_ME"))
        self.regex_tipo_anotacoes.append((re.compile("DESENQ.*(PEQUENO|\s*EPP\s*)"),"Desenq_EPP" ))
        self.regex_tipo_anotacoes.append((re.compile("CISAO\s*PARCIAL"),"Cisao_parcial" ))
        self.regex_tipo_anotacoes.append((re.compile("CONSOLIDACAO\s*CONTRATUAL"),"Consolidacao_contratual"))
        self.regex_tipo_anotacoes.append((re.compile("TRANSF.*SEDE.*OUTRA.*UF"),"Transf_sede_outra_UF" ))
        self.regex_tipo_anotacoes.append((re.compile("SUCEDIDA\s*POR"), "Sucedida_por"))
        self.regex_tipo_anotacoes.append((re.compile("NOMEAD[OA]\s*SINDIC[OA]"),"Nomeado_sindico"))
        self.regex_tipo_anotacoes.append((re.compile("PROTEC.*NOME.*COMERCIAL"), "Protecao_nome_comercial"))
        self.regex_tipo_anotacoes.append((re.compile("ARQUIV.*EMANCIPAC"),"Arquiv_emancipacao"))
        self.regex_tipo_anotacoes.append((re.compile("ANOTACAO.*(OFICIO|MANDADO).*(BCB|BANCO\s*CENTRAL|MINISTERIO|SECRETARIA|RECEITA\s*FEDERAL|RFB|CARF|CONSELHO)"),"Anotacao_oficio_adm"))
        self.regex_tipo_anotacoes.append((re.compile("A L T E R A C A O I N C L U S A O D E C G C"),"Alt_inclusao_CGC"))
        self.regex_tipo_anotacoes.append((re.compile("DENOMINAC.*SOCIAL.*ALTERA"),"Denominacao_social_alterada" ))
        self.regex_tipo_anotacoes.append((re.compile("ENDERECO.*FILIAL.*ALTERA"),"Endereco_filial_alterado"))
        self.regex_tipo_anotacoes.append((re.compile("ENDERECO\s*D[EA]\s*FILIAL.{0,50}?\s*ALTERADO|ALTER.{0,50}?\s*ENDERECO\s*D[EA]\s*FILIAL"), "Endereco_filial_alterado"))
        self.regex_tipo_anotacoes.append((re.compile("ENDERECO.*SEDE.*ALTERA"),"Endereco_sede_alterado" ))
        #self.regex_tipo_anotacoes.append((re.compile("^SP\s*CEP"),"SP_CEP" ))
        self.regex_tipo_anotacoes.append((re.compile("CISAO\s*(PARCIAL|TOTAL)|^CISAO"),"Cisao_parcial_total" ))
        self.regex_tipo_anotacoes.append((re.compile("TRANSFORMACAO\s*DE\s*EMPRESARIO\s*INDIV(?:IDUAL)?"),"Transf_empresa_individ"))
        self.regex_tipo_anotacoes.append((re.compile("ACORDO\s*D[EOA]S?\s*ACIONISTA"),"Acordo_acionistas" ))
        self.regex_tipo_anotacoes.append((re.compile("PARECER.*ASSESS.*SANADA.*IRREGUL"),"Parecer_assess_sanada_irreg"))
        self.regex_tipo_anotacoes.append((re.compile("^INCORPORA"),"Incorporacao" ))
        self.regex_tipo_anotacoes.append((re.compile("ELEICAO|REELEICAO|ELEITO"),"Eleicao_generico"))
        self.regex_tipo_anotacoes.append((re.compile("CONVALIDA.*FILIAL"),"Convalida_filial"))
        self.regex_tipo_anotacoes.append((re.compile("(ALTERA)?.*OBJETO\s* DA\s*(FI\s*LIAL|SEDE)(\s*ALTERADO)?"),"altera_objeto_filial"))
        self.regex_tipo_anotacoes.append((re.compile("AGRICOLACISAO\s*PARCIAL"), "agricola_cisao_parcial"))
        self.regex_tipo_anotacoes.append((re.compile("DOCUMENTO\s*DECLARADO\s*(NULO|INEFICAZ)"), "documento_declarado"))
        self.regex_tipo_anotacoes.append((re.compile("RETIRA\s*SE.*NA\s*SITUACAO\s*DE\s*SOCIO"), "Retira_socio"))
        self.regex_tipo_anotacoes.append((re.compile("^SAIDA\s*DE.*SOCI[OA]"), "Retira_socio"))
        self.regex_tipo_anotacoes.append((re.compile("(INDIS-?\s*PONI|PENHOR|ARREST|BLOQUE|SEQUESTR|ANOTAR\s*A\s*CONSTRICAO|CONSTRICAO ?JUDICIAL|SUSPEN.{1,15}TRANSFER|OFICIO).*(QU|C)OTAS|(QU|C)OTAS.*(INDIS-? ?PONI|PENHOR|ARREST|BLOQUE)|OFICIO.*RESTRICOES\s*AS\s*(QU|C)OTAS\s*SOCIAIS|SUSPENDER\s*OS\s*REGISTROS\s*DE\s*ALIENACOES\s*DE\s*(QU|C)OTAS\s*SOCIAIS"), "indisponibilidade_de_cotas"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO\s*D[EO]\s*CONTRATO\s*SOCIAL"), "Altera_contrato_social"))
        self.regex_tipo_anotacoes.append((re.compile("ALTERACAO\s*CONTRATUAL"), "Alteracao_contratual"))
        self.regex_tipo_anotacoes.append((re.compile("ACERVO\s*ENVIADO"), "acervo_enviado"))

    def create_regex_tipo_anotacoes_residual(self):

        self.regex_tipo_anotacoes_residual.append((re.compile("(REGISTRO ?DO ?COMERCIO|MINISTERIO DA FAZ|RECEITA FEDERA|DELEGACIA|DEPA?RTAMENTO|CIRETRAN|BANCO.*CENTRAL|PROCURADORIA|POLICIA|PREFEITURA|DELEGADO|AGENCIA NAC| ANS | GAECO |GRUPO DE ATUACAO ESPECIAL)"), "ADMINISTRATIVO"))
        self.regex_tipo_anotacoes_residual.append((re.compile("(FORO (REGIONAL|CENTRAL)|PROCESSO.*REQUERENTE.*REQUERIDO|PROCESSO.*EM QUE SAO PARTES|CARTA PRECATORIA|ACAO (DECLARA|ANULA)TORIA|MANDADO DE SEGURANCA|AGRAVO DE INSTRUMENTO|ANTECIPACAO DE TUTELA|COMARCA|JUDICIAL|TRATA\s*\-?\s*DE\s*OFICIO|ANOTACAO.*PROC\.?(ESSO)?.*?VARA\s+(TRATA\s*\-?\s*DE\s*OFICIO|ANOTACAO.*PROC\.?(ESSO)?​)?|CAMARA|JUSTICA|TRIBUNAL|TURMA|CIVEL|DESEMBARGAD|COLEGIO.*RECUR|JECRIM| JEC |ACAO ?CIVIL)"), "judicial"))
        self.regex_tipo_anotacoes_residual.append((re.compile("CONVOC.*(ASSEMB|AGE)"), "AGE"))
        self.regex_tipo_anotacoes_residual.append((re.compile("CONVOC.*(ASSEMB|AGO)"), "AGO"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^FILIAL.*TRANSFERIDA"), "Transferencia_filial"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^RETIRA.*SOCIO"), "Retira_socio"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^ENDERECO.*FILIAL"), "Altera_endereco_filial"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^RETIRA.*ADMIN"), "Destit_adm"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^TERMO.*POSSE.*DIRETOR"), "Diretor_admitido"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^TRANSFORMADA"), "Transformacao"))
        self.regex_tipo_anotacoes_residual.append((re.compile("AVISO.*ACIONIST"), "Aviso_acionista"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^TERMO.*EXONERA.*FIEL.*(ARMAZE|DEPOSITA)|TITULO\s*DE\s*CANCELAMENTO\s*DE\s*FIEL"),"Exonera_fiel_armazem"))
        self.regex_tipo_anotacoes_residual.append((re.compile("CANCEL.*FIEL.*ARMAZ"), "Exonera_fiel_armazem"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^TERMO.*NOMEA.*FIEL.*(ARMAZE|DEPOSITA)|TITULO\s*DE\s*NOMEACAO\s*DE\s*FIEL"), "Nomeia_fiel_armazem"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^EXISTEM\s*OUTROS\s*SOCIOS"), "Existem_outros_socios"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^TERMO.*CONVALID.*ETIQUET"), "Convalida_etiqueta"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^TERMO.*POSSE.*PRESIDENT"), "Presidente_admitido"))
        self.regex_tipo_anotacoes_residual.append((re.compile("^TERMO.*POSSE.*CONSELH.*SUPLENTE|^TERMO.*POSSE.*MEMBRO.*CONSELH.*ADMIN|^TERMO.*POSSE.*CONSELH"),"Conselheiro_admitido"))

    def create_regex_nome_abreviado(self):
        self.nome_abreviado_regex.append((re.compile('\\bABASTECIMENTOS?\\b'), 'ABAST'))
        self.nome_abreviado_regex.append((re.compile('\\bABRASIV[AO]S?\\b'), 'ABRAS'))
        self.nome_abreviado_regex.append((re.compile('\\bABSORVENTES?\\b'), 'ABSORV'))
        self.nome_abreviado_regex.append((re.compile('\\bACABA(D[OA]|MENTO)S?\\b'), 'ACAB'))
        self.nome_abreviado_regex.append((re.compile('\\bACEDEMIAS?\\b'), 'ACAD'))
        self.nome_abreviado_regex.append((re.compile('\\bACESS(ORIOS?|OR?A?)?\\b'), 'ACES'))
        self.nome_abreviado_regex.append((re.compile('\\bACIDENTES?\\b'), 'ACID'))
        self.nome_abreviado_regex.append((re.compile('\\bACUSTIC[OA]S?\\b'), 'ACUST'))
        self.nome_abreviado_regex.append((re.compile('\\bADESIV[AO]S?\\b'), 'ADES'))
        self.nome_abreviado_regex.append((re.compile('\\bADMINISTRA(CAO|DORA?|COES)?\\b'), 'ADM'))
        self.nome_abreviado_regex.append((re.compile('\\bADOLESC(ENTES?|ENCIAS?)\\b'), 'ADOLESC'))
        self.nome_abreviado_regex.append((re.compile('\\bADVO(CACIAS?|GAD[AO]S?)\\b'), 'ADV'))
        self.nome_abreviado_regex.append((re.compile('\\bAGENC(IAS?(DORA?S?))?\\b'), 'AG'))
        self.nome_abreviado_regex.append((re.compile('\\bAGRIC(OLAS|ULT(URA|ORA?))\\b'), 'AGRIC'))
        self.nome_abreviado_regex.append((re.compile('\\bAGROPEC(UARI[AO]S?)?\\b'), 'AGROP'))
        self.nome_abreviado_regex.append((re.compile('\\bAGUARDENTE?\\b'), 'AGUARD'))
        self.nome_abreviado_regex.append((re.compile('\\bALARM(ES?)?\\b'), 'ALAR'))
        self.nome_abreviado_regex.append((re.compile('\\bALIMENT(ACAO|IC(IOS?)?|OS?)?\\b'), 'ALIM'))
        self.nome_abreviado_regex.append((re.compile('\\bALINHA(R|MENTOS?)?\\b'), 'ALINHAM'))
        self.nome_abreviado_regex.append((re.compile('\\bALUG(AR?|UEL|UEIS)\\b'), 'ALUG'))
        self.nome_abreviado_regex.append((re.compile('\\bALUMINIOS?\\b'), 'ALUM'))
        self.nome_abreviado_regex.append((re.compile('\\bAMBIENT(ES?|AL)\\b'), 'AMB'))
        self.nome_abreviado_regex.append((re.compile('\\bANALI(SES?|STAS?)\\b'), 'ANAL'))
        self.nome_abreviado_regex.append((re.compile('\\bANESTESI(A|COS?|OLOGIA|STAS?)\\b'), 'ANEST'))
        self.nome_abreviado_regex.append((re.compile('\\bANTIG(OS?|UIDADES?)\\b'), 'ANTIG'))
        self.nome_abreviado_regex.append((re.compile('\\bANTIQUARIOS?\\b'), 'ANTIQ'))
        self.nome_abreviado_regex.append((re.compile('\\bAPARELHOS?\\b'), 'APAR'))
        self.nome_abreviado_regex.append((re.compile('\\bAPERFEICOAMENTOS?\\b'), 'APERF'))
        self.nome_abreviado_regex.append((re.compile('\\bAPLIC(ACAO|ACOES|AD[AO]S?)?\\b'), 'APL'))
        self.nome_abreviado_regex.append((re.compile('\\bAQUE(CEDOR(ES)?|CIMENTOS?)\\b'), 'AQUEC'))
        self.nome_abreviado_regex.append((re.compile('\\bARMAR(INHOS?)?\\b'), 'ARMAR'))
        self.nome_abreviado_regex.append((re.compile('\\bARMAZENS?(AMENTOS?)?\\b'), 'ARMAZ'))
        self.nome_abreviado_regex.append((re.compile('\\bARQUITET(URA|ONICOS?|[AO]S?)\\b'), 'ARQUIT'))
        self.nome_abreviado_regex.append((re.compile('\\bARRENDAMENTOS?\\b'), 'ARREND'))
        self.nome_abreviado_regex.append((re.compile('\\bARTEFS?(ATOS?)?\\b'), 'ARTEF'))
        self.nome_abreviado_regex.append((re.compile('\\bARTESAN(AIS|AL|ATOS?)\\b'), 'ARTESAN'))
        self.nome_abreviado_regex.append((re.compile('\\bARTIG(OS?)?\\b'), 'ART'))
        self.nome_abreviado_regex.append((re.compile('\\bARTIST(A|ICOS?)\\b'), 'ARTIST'))
        self.nome_abreviado_regex.append((re.compile('\\bASSEMBLEIAS?\\b'), 'ASSEMB'))
        self.nome_abreviado_regex.append((re.compile('\\bASSESS(ORES|OR(IA)?A?|ORAMENTO)?\\b'), 'ASS'))
        self.nome_abreviado_regex.append((re.compile('\\bASSINATURAS?\\b'), 'ASSIN'))
        self.nome_abreviado_regex.append((re.compile('\\bASSIST(ENCIAL?)?\\b'), 'ASSIS'))
        self.nome_abreviado_regex.append((re.compile('\\bASSOCIA(DOS|CAO|COES)\\b'), 'ASSOC'))
        self.nome_abreviado_regex.append((re.compile('\\bATACAD(OS?|ISTAS?)?\\b'), 'ATAC'))
        self.nome_abreviado_regex.append((re.compile('\\bATENDIMENTOS?\\b'), 'ATEND'))
        self.nome_abreviado_regex.append((re.compile('\\bATIVIDADES?\\b'), 'ATIV'))
        self.nome_abreviado_regex.append((re.compile('\\bAUDI[TO](VISUAL|OR(ES)?)?\\b'), 'AUD'))
        self.nome_abreviado_regex.append(
            (re.compile('\\bAUT(ARQUIAS?|OMACAO|OMATICOS?|OMOT(IVOS?)?|ONOM[OA]S?)\\b'), 'AUT'))
        self.nome_abreviado_regex.append((re.compile('\\bAUXILIAR(RES)?\\b'), 'AUX'))
        self.nome_abreviado_regex.append((re.compile('\\bAVALIAC?(AO|OES|DOR(A|ES)?)?\\b'), 'AVAL'))
        self.nome_abreviado_regex.append((re.compile('\\bAVANCA(R|DOS?)\\b'), 'AVANC'))
        self.nome_abreviado_regex.append((re.compile('\\bAVIC(OLAS?|ULTURA)\\b'), 'AVIC'))
        self.nome_abreviado_regex.append((re.compile('\\bBALNEARIOS?\\b'), 'BALN'))
        self.nome_abreviado_regex.append((re.compile('\\bBEBIDAS?\\b'), 'BEB'))
        self.nome_abreviado_regex.append((re.compile('\\bBENEFICI(O|ADORA?|ARI[OA]S?|ENTE)\\b'), 'BENEF'))
        self.nome_abreviado_regex.append((re.compile('\\bBERCARIOS?\\b'), 'BERC'))
        self.nome_abreviado_regex.append((re.compile('\\bBIBLIO(TECAS?|GRAFIC[OA]S?|TECONOMIAS?)\\b'), 'BIBL'))
        self.nome_abreviado_regex.append((re.compile('\\bBIJ(OU|U)T?(TERIAS?)?\\b'), 'BIJ'))
        self.nome_abreviado_regex.append(
            (re.compile('\\bBIOL?(OG[AO]?S?|OGICOS?|MEDIC[AO]S?|MOLECULAR(ES)?)?\\b'), 'BIO'))
        self.nome_abreviado_regex.append((re.compile('\\bBIOTECN(OLOGIAS?)?\\b'), 'BIOTEC'))
        self.nome_abreviado_regex.append((re.compile('\\bBOBINAS?\\b'), 'BOB'))
        self.nome_abreviado_regex.append((re.compile('\\bBORRAC(HARIAS?|HEIROS?)?\\b'), 'BORR'))
        self.nome_abreviado_regex.append((re.compile('\\bBRASIL(EIR[AO]S?)?\\b'), 'BRAS'))
        self.nome_abreviado_regex.append((re.compile('\\bCABELO?(EREIR[AO]S?)?\\b'), 'CABEL'))
        self.nome_abreviado_regex.append((re.compile('\\bCAFETERIAS?\\b'), 'CAFET'))
        self.nome_abreviado_regex.append((re.compile('\\bCALC(ADISTAS?|ADOS?)?\\b'), 'CAL'))
        self.nome_abreviado_regex.append((re.compile('\\bCALD(EIRA(RIA)?S?|EIR(AO|OES))\\b'), 'CALD'))
        self.nome_abreviado_regex.append((re.compile('\\bCAMERAS?\\b'), 'CAM'))
        self.nome_abreviado_regex.append((re.compile('\\bCAMISAS?(RIAS?)?\\b'), 'CAMIS'))
        self.nome_abreviado_regex.append((re.compile('\\bCAPACI(DADES?|TACAO|TORES?)\\b'), 'CAPAC'))
        self.nome_abreviado_regex.append((re.compile('\\bCARDIO(LOGI(A|CO))?\\b'), 'CARD'))
        self.nome_abreviado_regex.append((re.compile('\\bCARNES?\\b'), 'CAR'))
        self.nome_abreviado_regex.append((re.compile('\\bCARP(ETARIA|ETES?|INTEIR[AO]S?)\\b'), 'CARP'))
        self.nome_abreviado_regex.append((re.compile('\\bCART(EIRAS?|ORIOS?)\\b'), 'CART'))
        self.nome_abreviado_regex.append((re.compile('\\bCATALOGOS?\\b'), 'CATAL'))
        self.nome_abreviado_regex.append((re.compile('\\bCELULOSES?\\b'), 'CEL'))
        self.nome_abreviado_regex.append((re.compile('\\bCENTL?(RAL|ROS?)?\\b'), 'CENT'))
        self.nome_abreviado_regex.append((re.compile('\\bCERAMIC[AO]S?\\b'), 'CER'))
        self.nome_abreviado_regex.append((re.compile('\\bCHAVEIROS?\\b'), 'CHAV'))
        self.nome_abreviado_regex.append((re.compile('\\bCHOCOLATES?\\b'), 'CHOC'))
        self.nome_abreviado_regex.append((re.compile('\\bCIENT?(CIAS?|IFIC[AO]S?)?\\b'), 'CIE'))
        self.nome_abreviado_regex.append((re.compile('\\bCIGARROS?\\b'), 'CIG'))
        self.nome_abreviado_regex.append((re.compile('\\bCINEMATOGRAFICOS?\\b'), 'CINEMATOGRAF'))
        self.nome_abreviado_regex.append((re.compile('\\bCIRURG(IA|ICOS?)?\\b'), 'CIR'))
        self.nome_abreviado_regex.append((re.compile('\\bCIENT?(CIAS?|IFIC[AO]S?)?\\b'), 'CIE'))
        self.nome_abreviado_regex.append((re.compile('\\bCIV(EL|IL)\\b'), 'CIV'))
        self.nome_abreviado_regex.append((re.compile('\\bCLINICAS?\\b'), 'CLIN'))
        self.nome_abreviado_regex.append((re.compile('\\bCOBRA(NCAS?|DOR(ES)?)\\b'), 'COBR'))
        self.nome_abreviado_regex.append((re.compile('\\bCODI(FICAC(AO|OES)|GOS?)\\b'), 'COD'))
        self.nome_abreviado_regex.append((re.compile('\\bCOLETA?(IVOS?)\\b'), 'COL'))
        self.nome_abreviado_regex.append((re.compile('\\bCOLOCAO\\b'), 'COLOC'))
        self.nome_abreviado_regex.append((re.compile('\\bCOMBUST(IVEL|IVEIS)\\b'), 'COMB'))
        self.nome_abreviado_regex.append((re.compile('\\bCOMER(CI[OA](IS|L|Z))?\\b'), 'COM'))
        self.nome_abreviado_regex.append((re.compile('\\bCOMERCIALIZA(CAO|DORA)\\b'), 'COM'))
        self.nome_abreviado_regex.append((re.compile('\\bCOML?M?(ISSAO)?\\b'), 'COM'))
        self.nome_abreviado_regex.append((re.compile('\\bCOMPO?[MN]?(ENTES?|UTADOR(ES)?|UTACAO)?\\b'), 'COMP'))
        self.nome_abreviado_regex.append((re.compile('\\bCOMUNICA(CAO|COES)?\\b'), 'COMUNIC'))
        self.nome_abreviado_regex.append((re.compile('\\bCOMUNITARI[OA]S?\\b'), 'COMUNIT'))
        self.nome_abreviado_regex.append((re.compile('\\bCONCRET(O|AGEM)\\b'), 'CONC'))
        self.nome_abreviado_regex.append(
            (re.compile('\\bCOND(ICIONA(DORES|DOR|MENTOS?)|OMINI(OS?|A(L|IS))|UTOR(ES)?)\\b'), 'COND'))
        self.nome_abreviado_regex.append((re.compile('\\bCONECTOR(ES)?\\b'), 'CONECT'))
        self.nome_abreviado_regex.append((re.compile('\\bCONFEC(CAO|COES|C)?\\b'), 'CONF'))
        self.nome_abreviado_regex.append((re.compile('\\bCONFEITA(RIA|DOS)\\b'), 'CONF'))
        self.nome_abreviado_regex.append((re.compile('\\bCONGELADOS?\\b'), 'CONGEL'))
        self.nome_abreviado_regex.append((re.compile('\\bCOMGLOMERADOS?\\b'), 'CONGLOM'))
        self.nome_abreviado_regex.append((re.compile('\\bCONGREGA(CAO|COES)\\b'), 'CONGR'))
        self.nome_abreviado_regex.append((re.compile('\\bCONJUNTOS?\\b'), 'CONJ'))
        self.nome_abreviado_regex.append((re.compile('\\bCONSERVA(CAO|COES)\\b'), 'CONSERV'))
        self.nome_abreviado_regex.append((re.compile('\\bCONSTRUC(AO|OES)?\\b'), 'CONSTR'))
        self.nome_abreviado_regex.append((re.compile('\\bCONSTRUTORA?\\b'), 'CONSTR'))
        self.nome_abreviado_regex.append((re.compile('\\bCONSTRUC(AO|OES)?\\b'), 'CONSTR'))
        self.nome_abreviado_regex.append((re.compile('\\bCONSULTORA?(ORES|IAS?)?\\b'), 'CONSULT'))
        self.nome_abreviado_regex.append((re.compile('\\bCONTABIL(IDADES?|ISTAS?)?\\b'), 'CONTAB'))
        self.nome_abreviado_regex.append((re.compile('\\bCONTADORA?\\b'), 'CONTAB'))
        self.nome_abreviado_regex.append((re.compile('\\bCONT(ATO|ROLE|R)\\b'), 'CONT'))
        self.nome_abreviado_regex.append((re.compile('\\bCONVEN(COES|IENCIAS?)?\\b'), 'CONV'))
        self.nome_abreviado_regex.append((re.compile('\\bCOOPERATIVAS?\\b'), 'COOP'))
        self.nome_abreviado_regex.append((re.compile('\\bCOORDENACAO\\b'), 'COORD'))
        self.nome_abreviado_regex.append((re.compile('\\bCORANTES\\b'), 'COR'))
        self.nome_abreviado_regex.append((re.compile('\\bCORPORATIV[AO]S?\\b'), 'CORP'))
        self.nome_abreviado_regex.append((re.compile('\\bCORR(ETAGEM|ETOR(AS?|ES)?|ET)\\b'), 'COR'))
        self.nome_abreviado_regex.append((re.compile('\\bCOSMETIC[AO]S?\\b'), 'COSM'))
        self.nome_abreviado_regex.append((re.compile('\\bCOSMETOLOGIA\\b'), 'COSM'))
        self.nome_abreviado_regex.append((re.compile('\\bCOSTURA?\\b'), 'COST'))
        self.nome_abreviado_regex.append((re.compile('\\bCREDITO?(ICIOS|RIOS)?\\b'), 'CRED'))
        self.nome_abreviado_regex.append((re.compile('\\bCUIDADOS?\\b'), 'CUID'))
        self.nome_abreviado_regex.append((re.compile('\\bCULINARIAS?\\b'), 'CULIN'))
        self.nome_abreviado_regex.append((re.compile('\\bCULTURAL?\\b'), 'CULT'))
        self.nome_abreviado_regex.append((re.compile('\\bCUTELARIAS?\\b'), 'CUT'))
        self.nome_abreviado_regex.append((re.compile('\\bDECODIFICADORES?\\b'), 'DECOD'))
        self.nome_abreviado_regex.append((re.compile('\\bDECORA(TIVO|CAO|COES|C)?\\b'), 'DEC'))
        self.nome_abreviado_regex.append((re.compile('\\bDETETIZ(ACAO|ACOES)?\\b'), 'DEDET'))
        self.nome_abreviado_regex.append((re.compile('\\bDEL(E?GADO|EGACIA)\\b'), 'DELEG'))
        self.nome_abreviado_regex.append((re.compile('\\bDENTA?L?(RIA|ISTA)?\\b'), 'DENT'))
        self.nome_abreviado_regex.append((re.compile('\\bDEPARTAMENTOS?\\b'), 'DEP'))
        self.nome_abreviado_regex.append((re.compile('\\bDDEPOSITOS?\\b'), 'DEP'))
        self.nome_abreviado_regex.append((re.compile('\\bDENTA?L?(RIA|ISTA)?\\b'), 'DENT'))
        self.nome_abreviado_regex.append((re.compile('\\bDERIV(ADOS?)?\\b'), 'DER'))
        self.nome_abreviado_regex.append((re.compile('\\bDERMATOLOGI(AS?|CAS?)\\b'), 'DERMAT'))
        self.nome_abreviado_regex.append((re.compile('\\bDESCAR(TAVE(L|IS))?\\b'), 'DESC'))
        self.nome_abreviado_regex.append((re.compile('\\bDESEN(HOS?)?\\b'), 'DES'))
        self.nome_abreviado_regex.append((re.compile('\\bDESENHISTAS?\\b'), 'DES'))
        self.nome_abreviado_regex.append((re.compile('\\bDESENTUP(IDORAS?)?\\b'), 'DESENT'))
        self.nome_abreviado_regex.append((re.compile('\\bDESENV(OLVIMENTOS?)?\\b'), 'DES'))
        self.nome_abreviado_regex.append((re.compile('\\bDIAG(NOSTICOS?)?\\b'), 'DIAG'))
        self.nome_abreviado_regex.append((re.compile('\\bDIGITAL?(IZACAO|IZACOES|IS)?\\b'), 'DIG'))
        self.nome_abreviado_regex.append((re.compile('\\bDIRIG(IDOS?|ENTES?)\\b'), 'DIRIG'))
        self.nome_abreviado_regex.append((re.compile('\\bDISTRIB?(UIDOR(AS?|ES)?)?\\b'), 'DIST'))
        self.nome_abreviado_regex.append((re.compile('\\bDIVISORIAS?\\b'), 'DIVIS'))
        self.nome_abreviado_regex.append((re.compile('\\bDOCUMENT(OS?|ACAO|ACOES)\\b'), 'DOC'))
        self.nome_abreviado_regex.append((re.compile('\\bDOMESTIC[AO]S?\\b'), 'DOMEST'))
        self.nome_abreviado_regex.append((re.compile('\\bDOMICILI(OS?|AR(ERES)?)\\b'), 'DOMIC'))
        self.nome_abreviado_regex.append((re.compile('\\bDOUTOR(ES)?\\b'), 'DR'))
        self.nome_abreviado_regex.append((re.compile('\\bDOUTORAS?\\b'), 'DRA'))
        self.nome_abreviado_regex.append((re.compile('\\bDROGARIAS?\\b'), 'DROG'))
        self.nome_abreviado_regex.append((re.compile('\\bECOLOGIA?S?(COS?)?\\b'), 'ECO'))
        self.nome_abreviado_regex.append((re.compile('\\bECON(OMICOS?|OMIAS?|OMISTAS?)?\\b'), 'ECO'))
        self.nome_abreviado_regex.append((re.compile('\\bEDI(CAO|COES|FICA(CAO|COES)|FICIOS?|TORA?(CAO|IA(L|IS))?)\\b'), 'ED'))
        self.nome_abreviado_regex.append((re.compile('\\bEDUCA(CAO|CION(AL|AIS)?|NDARIOS?)\\b'), 'EDUC'))
        self.nome_abreviado_regex.append((re.compile('\\bEFETIV[OA]S?\\b'), 'EFET'))
        self.nome_abreviado_regex.append((re.compile('\\bELABORA(CAO|COES)\\b'), 'ELAB'))
        self.nome_abreviado_regex.append((re.compile('\\bELETRIC(AS?|OS?)?\\b'), 'ELET'))
        self.nome_abreviado_regex.append((re.compile('\\bELETRONICOS?\\b'), 'ELET'))
        self.nome_abreviado_regex.append((re.compile('\\bELETRODOMESTICOS?\\b'), 'ELETROD'))
        self.nome_abreviado_regex.append((re.compile('\\bELETROELETRONICOS?\\b'), 'ELETROEL'))
        self.nome_abreviado_regex.append((re.compile('\\bELETROMECANICOS?\\b'), 'ELETROEM'))
        self.nome_abreviado_regex.append((re.compile('\\bELEVADOR(ES)?\\b'), 'ELEV'))
        self.nome_abreviado_regex.append((re.compile('\\bEMBAL(AGENS)?\\b'), 'EMBAL'))
        self.nome_abreviado_regex.append((re.compile('\\bEMERGENCIA(L|IS)?\\b'), 'EMERG'))
        self.nome_abreviado_regex.append((re.compile('\\bEMERGENTES?\\b'), 'EMERG'))
        self.nome_abreviado_regex.append((re.compile('\\bEMPACOTADORAS?\\b'), 'EMPACOT'))
        self.nome_abreviado_regex.append((re.compile('\\bEMPILHADEIRAS?\\b'), 'EMPIL'))
        self.nome_abreviado_regex.append((re.compile('\\bEMPRE(SAS?(RIOS?|RIA(L|IS)))?\\b'), 'EMP'))
        self.nome_abreviado_regex.append((re.compile('\\bEMPREED(IMENTOS?)?\\b'), 'EMPREEND'))
        self.nome_abreviado_regex.append((re.compile('\\bEMPREIT(AGEM|EIRAS?|EIROS?)\\b'), 'EMPREIT'))
        self.nome_abreviado_regex.append((re.compile('\\bENCADERNA(CAO|COES|DORAS?)\\b'), 'ENCADERN'))
        self.nome_abreviado_regex.append((re.compile('\\bENCANTAD(AS?|OS?)\\b'), 'ENCANT'))
        self.nome_abreviado_regex.append((re.compile('\\bENCOMENDAS?\\b'), 'ENCOM'))
        self.nome_abreviado_regex.append((re.compile('\\bENFERM?(AG|AGEM|EIR[OA]S?)?\\b'), 'ENF'))
        self.nome_abreviado_regex.append((re.compile('\\bENGERRAFADORAS?\\b'), 'ENGARRAF'))
        self.nome_abreviado_regex.append((re.compile('\\bENGE(NHARIAS?|NHEIR[AO]S?)?\\b'), 'ENG'))
        self.nome_abreviado_regex.append((re.compile('\\bENGRENAGENS\\b'), 'ENGREN'))
        self.nome_abreviado_regex.append((re.compile('\\bENSINOS?\\b'), 'ENS'))
        self.nome_abreviado_regex.append((re.compile('\\bENTREGAS?\\b'), 'ENTREG'))
        self.nome_abreviado_regex.append((re.compile('\\bENTRETEN(IMENTOS?)?\\b'), 'ENTRET'))
        self.nome_abreviado_regex.append((re.compile('\\bEMERGENCIA(L|IS)?\\b'), 'EMERG'))
        self.nome_abreviado_regex.append((re.compile('\\bEQUIP(AMENTOS?|[ST](OS?)?)\\b'), 'EQUIP'))
        self.nome_abreviado_regex.append((re.compile('\\bESCAPAMENTOS?\\b'), 'ESCAP'))
        self.nome_abreviado_regex.append((re.compile('\\bESCOLA?(RES|R)?\\b'), 'ESC'))
        self.nome_abreviado_regex.append((re.compile('\\bESCRIT(ORIOS?)?\\b'), 'ESC'))
        self.nome_abreviado_regex.append((re.compile('\\bESOTERICOS?\\b'), 'ESOT'))
        self.nome_abreviado_regex.append((re.compile('\\bESPEC(IAL|IALIZAD[AO]S?)?\\b'), 'ESP'))
        self.nome_abreviado_regex.append((re.compile('\\bESPO?(IRITAS?|RTES?|RTIV[AO]S?)?\\b'), 'ESP'))
        self.nome_abreviado_regex.append((re.compile('\\bESQUADRARIAS?\\b'), 'ESQ'))
        self.nome_abreviado_regex.append((re.compile('\\bESSENCIAS?\\b'), 'ESS'))
        self.nome_abreviado_regex.append((re.compile('\\bESTACION(AMENTOS?)?\\b'), 'ESTAC'))
        self.nome_abreviado_regex.append((re.compile('\\bESTAMPA(DOS?|RIAS?)?\\b'), 'ESTAMP,'))
        self.nome_abreviado_regex.append((re.compile('\\bESTANCIAS?\\b'), 'EST'))
        self.nome_abreviado_regex.append((re.compile('\\bESTETIC[OA]S?\\b'), 'ESTET'))
        self.nome_abreviado_regex.append((re.compile('\\bESTRADAS?\\b'), 'EST'))
        self.nome_abreviado_regex.append((re.compile('\\bESTRUTURAS?(L|IS)?\\b'), 'ESTRUT'))
        self.nome_abreviado_regex.append((re.compile('\\bETIQUETAS?\\b'), 'ETIQ'))
        self.nome_abreviado_regex.append((re.compile('\\bEVANGE(LHOS?|LIC[AO]S?|LISTAS?)\\b'), 'EVANG'))
        self.nome_abreviado_regex.append((re.compile('\\bEVENT(OS?)?\\b'), 'EV'))
        self.nome_abreviado_regex.append((re.compile('\\bEXAUST(AO|ORES|OR)\\b'), 'EXAUST'))
        self.nome_abreviado_regex.append((re.compile('\\bEXCEPCIONA(L|IS)\\b'), 'EXCEPCION'))
        self.nome_abreviado_regex.append((re.compile('\\bESCOLA?(RES|R)?\\b'), 'ESC'))
        self.nome_abreviado_regex.append((re.compile('\\bEXECUT(IV[AO]S?)?\\b'), 'EXEC'))
        self.nome_abreviado_regex.append((re.compile('\\bEXPEDI(CAO|COES)\\b'), 'EXPED'))
        self.nome_abreviado_regex.append((re.compile('\\bEXPORTA(CAO|COES|DORAS?)?\\b'), 'EXPORT'))
        self.nome_abreviado_regex.append((re.compile('\\bEXTERIOR(ES)?\\b'), 'EXT'))
        self.nome_abreviado_regex.append((re.compile('\\bEXTERNOS?\\b'), 'EXT'))
        self.nome_abreviado_regex.append((re.compile('\\bFABRICAS?(CAO|COES|NTES?)?\\b'), 'FAB'))
        self.nome_abreviado_regex.append((re.compile('\\bFACULDADES?\\b'), 'FAC'))
        self.nome_abreviado_regex.append((re.compile('\\bFARMAC(IA|EUTIC[AO]S?)?\\b'), 'FARM'))
        self.nome_abreviado_regex.append((re.compile('\\bFAZ(ENDAS?|ENDEIR[OA]S?)?\\b'), 'FZ'))
        self.nome_abreviado_regex.append((re.compile('\\bFDOS\\b'), 'FDO'))
        self.nome_abreviado_regex.append((re.compile('\\bFECHADURAS?\\b'), 'FECHA'))
        self.nome_abreviado_regex.append((re.compile('\\bFEMININ[AO]S\\b'), 'FEM'))
        self.nome_abreviado_regex.append((re.compile('\\bFERRA[GM](EM|ENS|ENTAS?)?\\b'), 'FERR'))
        self.nome_abreviado_regex.append((re.compile('\\bFERTILIZANTES?\\b'), 'FERTIL'))
        self.nome_abreviado_regex.append((re.compile('\\bFIBRAS?\\b'), 'FIB'))
        self.nome_abreviado_regex.append((re.compile('\\bFILANTROPIA?(CAS?)?\\b'), 'FILANT'))
        self.nome_abreviado_regex.append((re.compile('\\bFINANC(AS?|EIR[OA]S?)\\b'), 'FINANC'))
        self.nome_abreviado_regex.append((re.compile('\\bFISIOLOGIAS?\\b'), 'FIS'))
        self.nome_abreviado_regex.append((re.compile('\\bFISIOTER(APIAS?|APICOS?)\\b'), 'FISIOT'))
        self.nome_abreviado_regex.append((re.compile('\\bFLORIC(ULTURAS?)?\\b'), 'FLOR'))
        self.nome_abreviado_regex.append((re.compile('\\bFOMENTOS?\\b'), 'FOM'))
        self.nome_abreviado_regex.append((re.compile('\\bFONOAUDIOLOG[OI]A?\\b'), 'FONOAUD'))
        self.nome_abreviado_regex.append((re.compile('\\bFORMA(CAO|COES)?\\b'), 'FROM'))
        self.nome_abreviado_regex.append((re.compile('\\bFORNEC(IMENTOS?|EDORES?)?\\b'), 'FORNEC'))
        self.nome_abreviado_regex.append((re.compile('\\bFOTOGRA?(FIAS?|FICOS?)?\\b'), 'FOT'))
        self.nome_abreviado_regex.append((re.compile('\\bFRATERNIDADES?\\b'), 'FRAT'))
        self.nome_abreviado_regex.append((re.compile('\\bFUNCIONA(RIOS?|LISMOS?)\\b'), 'FUNC'))
        self.nome_abreviado_regex.append((re.compile('\\bFUNDAC?(CAO|COES)?\\b'), 'FUND'))
        self.nome_abreviado_regex.append((re.compile('\\bFUNDOS?\\b'), 'FDO'))
        self.nome_abreviado_regex.append((re.compile('\\bFUNERARI[AO]S?\\b'), 'FUN'))
        self.nome_abreviado_regex.append((re.compile('\\bFUNIL(EIROS?|ARIAS?)\\b'), 'FUNIL'))
        self.nome_abreviado_regex.append((re.compile('\\bGALERIAS?\\b'), 'GAL'))
        self.nome_abreviado_regex.append((re.compile('\\bGARAG(EM|ENS)\\b'), 'GARAG'))
        self.nome_abreviado_regex.append((re.compile('\\bGASOLINAS?\\b'), 'GAS'))
        self.nome_abreviado_regex.append((re.compile('\\bGASTRO(NOMI(A|CO)|ENTEROLOGISTAS?)\\b'), 'GASTR'))
        self.nome_abreviado_regex.append((re.compile('\\bGENE(ROS?|TICOS?)\\b'), 'GEN'))
        self.nome_abreviado_regex.append((re.compile('\\bGERENCIAMENTOS?\\b'), 'GERENC'))
        self.nome_abreviado_regex.append((re.compile('\\bGEST(AO|OR(ES|AS?)?)\\b'), 'GEST'))
        self.nome_abreviado_regex.append((re.compile('\\bGINASTA?(ICAS?)?\\b'), 'GIN'))
        self.nome_abreviado_regex.append((re.compile('\\bGINECO(LOGIAS?|LOGICOS?|LOGISTAS?)\\b'), 'GINEC'))
        self.nome_abreviado_regex.append((re.compile('\\bGRAFIC[AO]S?\\b'), 'GRAF'))
        self.nome_abreviado_regex.append((re.compile('\\bGRANITOS?\\b'), 'GRANG'))
        self.nome_abreviado_regex.append((re.compile('\\bHABILITA(CAO|COES)\\b'), 'HABILIT'))
        self.nome_abreviado_regex.append((re.compile('\\bHEMATOLOGIAS?\\b'), 'HEMAT'))
        self.nome_abreviado_regex.append((re.compile('\\bHEMOTERAPIAS?\\b'), 'HEMOT'))
        self.nome_abreviado_regex.append((re.compile('\\bHIDR(AUL|AULIC[OA]S?|OVIARIOS?)?\\b'), 'HID'))
        self.nome_abreviado_regex.append((re.compile('\\bHIGIENE?(IZA(CAO|COES))?\\b'), 'HIG'))
        self.nome_abreviado_regex.append((re.compile('\\bHISTORI(A|C[AO]S?)\\b'), 'HIST'))
        self.nome_abreviado_regex.append((re.compile('\\bHOLISTIC[AO]S?\\b'), 'HOL'))
        self.nome_abreviado_regex.append((re.compile('\\bHOMEOPATIAS?\\b'), 'HOMEOP'))
        self.nome_abreviado_regex.append((re.compile('\\bHOSPITA(L|IS)\\b'), 'HOSP'))
        self.nome_abreviado_regex.append((re.compile('\\bHORTIFRUTI(GRAN(JEIROS?)?)?\\b'), 'HORTIF'))
        self.nome_abreviado_regex.append((re.compile('\\bHOSPEDA(GEM|GENS|RIAS?)\\b'), 'HOSPED'))
        self.nome_abreviado_regex.append((re.compile('\\bHOSPITA(LAR|LARES)\\b'), 'HOSP'))
        self.nome_abreviado_regex.append((re.compile('\\bHOT(EL|EIS|ELARIAS?|ELEIROS?)\\b'), 'HOT'))
        self.nome_abreviado_regex.append((re.compile('\\bHUMAN[OA]S?\\b'), 'HUM'))
        self.nome_abreviado_regex.append((re.compile('\\bIDENTIFICA(COES|CAO)?\\b'), ' IDENTIF '))
        self.nome_abreviado_regex.append((re.compile('\\bIDIOMAS?\\b'), ' IDIO '))
        self.nome_abreviado_regex.append((re.compile('\\bIGRS?(EJAS?)?\\b'), ' IG '))
        self.nome_abreviado_regex.append((re.compile('\\bILUMINA(CAO|COES)?\\b'), ' ILUMIN '))
        self.nome_abreviado_regex.append((re.compile('\\bILUSTRATIVOS?\\b'), ' ILUSTRAT '))
        self.nome_abreviado_regex.append((re.compile('\\bIMAGE(M|NS)?\\b'), ' IMAG '))
        self.nome_abreviado_regex.append((re.compile('\\bIMOBIL(IARI[AO]S?|IAR)?\\b'), ' IMOB '))
        self.nome_abreviado_regex.append((re.compile('\\bIMPERMEABILIZA(DORA?S?|NTES?)?\\b'), ' IMPERM '))
        self.nome_abreviado_regex.append((re.compile('\\bIMPLEMENTOS?\\b'), ' IMPLEM '))
        self.nome_abreviado_regex.append((re.compile('\\bIMPORT(ACAO|ACOES|ADOR([EA])?S?)?\\b'), ' IMP '))
        self.nome_abreviado_regex.append((re.compile('\\bIMPRESS(AO|OES|ORAS?)?\\b'), ' IMPR '))
        self.nome_abreviado_regex.append((re.compile('\\bINADIMPL(ENCIA|ENTES?)?\\b'), ' INADIMP '))
        self.nome_abreviado_regex.append((re.compile('\\bINCORP(ORACAO|ORACOES|ORADOR([EA])?S?)?\\b'), ' INC '))
        self.nome_abreviado_regex.append((re.compile('\\bINDEPEND(ENDENTES?)?\\b'), ' INDEP '))
        self.nome_abreviado_regex.append((re.compile('\\bINDIVIDU(AL|AIS)?\\b'), ' INDIV '))
        self.nome_abreviado_regex.append((re.compile('\\bINDU?ST?(RIAI?S?|AL)?\\b'), ' IND '))
        self.nome_abreviado_regex.append((re.compile('\\bINFAN(CIAS?|TIL|TIS)?\\b'), ' INF '))
        self.nome_abreviado_regex.append((re.compile('\\bINFECTOLOGIAS?\\b'), ' INFECT '))
        self.nome_abreviado_regex.append((re.compile('\\bINFORM?(ACAO|ACOES|ATICAS?)?\\b'), ' INF '))
        self.nome_abreviado_regex.append((re.compile('\\bINFRAESTRUTURAS?\\b'), ' INFRAEST '))
        self.nome_abreviado_regex.append((re.compile('\\bINGR(ESSOS?)?\\b'), ' ING '))
        self.nome_abreviado_regex.append((re.compile('\\bINJE(CAO|COES|TORAS?)?\\b'), ' INJ '))
        self.nome_abreviado_regex.append((re.compile('\\bINSPEC?(AO|OES|TOR(ES|IAS?)?)?\\b'), ' INSP '))
        self.nome_abreviado_regex.append((re.compile('\\bINSTAL((AC)(AO|OES)?)?\\b'), ' INST '))
        self.nome_abreviado_regex.append((re.compile('\\bINSTITUC?(IONAL|IONAIS|AO|OES|TO)?\\b'), ' INSTIT '))
        self.nome_abreviado_regex.append((re.compile('\\bINTRUM(ENTOS?)?\\b'), ' INSTR '))
        self.nome_abreviado_regex.append((re.compile('\\bINSUMOS?\\b'), ' INSUM '))
        self.nome_abreviado_regex.append((re.compile('\\bINTEGR?(ACAO|ACOES|AD[AO]S?)?\\b'), ' INT '))
        self.nome_abreviado_regex.append((re.compile('\\bINTEL(IG(ENCIAS?|ENTES?)?)?\\b'), ' INTEL '))
        self.nome_abreviado_regex.append((re.compile('\\bINTERM((E(D(IACAO|IACOES|IADORES)?)?)?)?\\b'), ' INTER '))
        self.nome_abreviado_regex.append((re.compile('\\bINTERN((AC)(IONAL|ACIONAIS)?)?\\b'), ' INT '))
        self.nome_abreviado_regex.append((re.compile('\\bINTL\\b'), ' INT '))
        self.nome_abreviado_regex.append((re.compile('\\bINVEST(IDOR(ES)?|IMENTOS?)?\\b'), ' INV '))
        self.nome_abreviado_regex.append((re.compile('\\bIRRIGAC(AO|OES)\\b'), ' IRRIG '))
        self.nome_abreviado_regex.append((re.compile('\\bJARDI(M|NS)\\b'), ' JD '))
        self.nome_abreviado_regex.append((re.compile('\\bJORNALIST(AS?|IC[AO])?\\b'), ' JOR '))
        self.nome_abreviado_regex.append((re.compile('\\bJORN(AL|AIS)?\\b'), ' JOR '))
        self.nome_abreviado_regex.append((re.compile('\\bJUNIOR(ES)?\\b'), ' JR '))
        self.nome_abreviado_regex.append((re.compile('\\bJUDICI(AL|AIS)\\b'), ' JUD '))
        self.nome_abreviado_regex.append((re.compile('\\bJUSTICAS?\\b'), ' JUST '))
        self.nome_abreviado_regex.append((re.compile('\\bLABORAT(ORIAL|ORIAIS|ORIOS?)?\\b'), ' LAB '))
        self.nome_abreviado_regex.append((re.compile('\\bLANC(H(ES?|ONETES?)?)?\\b'), ' LAN '))
        self.nome_abreviado_regex.append((re.compile('\\bLATIC(INIOS?)?\\b'), ' LAT '))
        self.nome_abreviado_regex.append((re.compile('\\bLAVAG(EM|ENS)?\\b'), ' LAV '))
        self.nome_abreviado_regex.append((re.compile('\\bLAVAND(ERIAS?)?\\b'), ' LAV '))
        self.nome_abreviado_regex.append((re.compile('\\bLETREIROS?\\b'), ' LETR '))
        self.nome_abreviado_regex.append((re.compile('\\bLIBER(AL|AIS|DADES?)?\\b'), ' LIB '))
        self.nome_abreviado_regex.append((re.compile('\\bLICENC(AS?|IAMENTOS?)?\\b'), ' LIC '))
        self.nome_abreviado_regex.append((re.compile('\\bLIMP(EZAS?)?\\b'), ' LIM '))
        self.nome_abreviado_regex.append((re.compile('\\bLIQUIDAC(AO|OES)?\\b'), ' LIQUID '))
        self.nome_abreviado_regex.append((re.compile('\\bLIVROS?\\b'), ' LIV '))
        self.nome_abreviado_regex.append((re.compile('\\bLOCAC(AO|OES)?\\b'), ' LOC '))
        self.nome_abreviado_regex.append((re.compile('\\bLOCAD(OR|ORAS?|ORES)?\\b'), ' LOC '))
        self.nome_abreviado_regex.append((re.compile('\\bLOGIST(ICAS?)?\\b'), ' LOG '))
        self.nome_abreviado_regex.append((re.compile('\\bLOJ(AS?|ISTAS?)?\\b'), ' LOJ '))
        self.nome_abreviado_regex.append((re.compile('\\bLTDA\\b'), ' LT '))
        self.nome_abreviado_regex.append((re.compile('\\bLUBRIFICANTES?\\b'), ' LUBRIF '))
        self.nome_abreviado_regex.append((re.compile('\\bMADEIRAS?\\b'), ' MAD '))
        self.nome_abreviado_regex.append((re.compile('\\bMADEI?(REIRAS?)\\b'), ' MAD '))
        self.nome_abreviado_regex.append((re.compile('\\bMALHA(S|RIAS?)?\\b'), ' MALH '))
        self.nome_abreviado_regex.append((re.compile('\\bMANICURES?\\b'), ' MANIC '))
        self.nome_abreviado_regex.append((re.compile('\\bMANIPULAC(AO|OES)?\\b'), ' MANIP '))
        self.nome_abreviado_regex.append((re.compile('\\bMANUFAT(URADOS?|URAS?)?\\b'), ' MANUF '))
        self.nome_abreviado_regex.append((re.compile('\\bMANUT(ENCAO|ENCOES)?\\b'), ' MAN '))
        self.nome_abreviado_regex.append((re.compile('\\bMAQUI?(NARIOS?|NAS?|NARIAS?)?\\b'), ' MAQ '))
        self.nome_abreviado_regex.append((re.compile('\\bMARCENARIAS?\\b'), ' MARC '))
        self.nome_abreviado_regex.append((re.compile('\\bMARKG?(ETING)?\\b'), ' MARK '))
        self.nome_abreviado_regex.append((re.compile('\\bMARMORES?\\b'), ' MARM '))
        self.nome_abreviado_regex.append((re.compile('\\bMASSAG(M|ENS|ISTAS?)?\\b'), ' MASSAG '))
        self.nome_abreviado_regex.append((re.compile('\\bMATER(IAIS|RIAL)?\\b'), ' MAT '))
        self.nome_abreviado_regex.append((re.compile('\\bMAT[LS]\\b'), ' MAT '))
        self.nome_abreviado_regex.append((re.compile('\\bMECAN(IC[AO]S?)?\\b'), ' MEC '))
        self.nome_abreviado_regex.append((re.compile('\\bMEDICAM(ENTOS?)?\\b'), ' MED '))
        self.nome_abreviado_regex.append((re.compile('\\bMEDICIN(AS?|AL|AIS)?\\b'), ' MED '))
        self.nome_abreviado_regex.append((re.compile('\\bMEDICOS?\\b'), ' MED '))
        self.nome_abreviado_regex.append((re.compile('\\bMERCAD(OS?|ORIAS?)?\\b'), ' MERC '))
        self.nome_abreviado_regex.append((re.compile('\\bMERCAN(TIL|TIS)?\\b'), ' MERC '))
        self.nome_abreviado_regex.append((re.compile('\\bMERCEARIAS?\\b'), ' MERC '))
        self.nome_abreviado_regex.append((re.compile('\\bMET[AL](IS|LICOS?)?\\b'), ' MET '))
        self.nome_abreviado_regex.append((re.compile('\\bMETROLOGIAS?\\b'), ' METR '))
        self.nome_abreviado_regex.append((re.compile('\\bMICROBIOLGIAS?\\b'), ' MICROB '))
        self.nome_abreviado_regex.append((re.compile('\\bMINERA(CAO|IS|AL)?\\b'), ' MIN '))
        self.nome_abreviado_regex.append((re.compile('\\bMOBIL(IAS?|IARIOS?|IDADES?)?\\b'), ' MOB '))
        self.nome_abreviado_regex.append((re.compile('\\bMODEL(AGEM|OS?|AGENS)?\\b'), ' MOD '))
        self.nome_abreviado_regex.append((re.compile('\\bMONTADOR(AS?)?\\b'), ' MONT '))
        self.nome_abreviado_regex.append((re.compile('\\bMONTAG(EM|ENS)?\\b'), ' MONT '))
        self.nome_abreviado_regex.append((re.compile('\\bMORAD(OR|ORES)?\\b'), ' MOR '))
        self.nome_abreviado_regex.append((re.compile('\\bMOTOR(ES|IZ|IZACAO|IZADOS?|IZACOES)?\\b'), ' MOT '))
        self.nome_abreviado_regex.append((re.compile('\\bMOVE(EL|IS)?\\b'), ' MOV '))
        self.nome_abreviado_regex.append((re.compile('\\bMOVIMEN(TACAO|TOS?|TACOES)?\\b'), ' MOV '))
        self.nome_abreviado_regex.append((re.compile('\\bMUNICIP(AIS|AL|IOS?)?\\b'), ' MUN '))
        self.nome_abreviado_regex.append((re.compile('\\bMUSCULA(COES|CAO|RES|R)?\\b'), ' MUSC '))
        self.nome_abreviado_regex.append((re.compile('\\bNACION(AIS|AL)?\\b'), ' NAC '))
        self.nome_abreviado_regex.append((re.compile('\\bNASCI(DOS?|MENTOS?)?\\b'), ' NASC '))
        self.nome_abreviado_regex.append((re.compile('\\bNASCTO\\b'), ' NASC '))
        self.nome_abreviado_regex.append((re.compile('\\bNATUR(AL|AIS|EZAS?)?\\b'), ' NAT '))
        self.nome_abreviado_regex.append((re.compile('\\bNEGOC(IACAO|IACOES|IOS?)?\\b'), ' NEG '))
        self.nome_abreviado_regex.append((re.compile('\\bNEGS\\b'), ' NEG '))
        self.nome_abreviado_regex.append((re.compile('\\bNEUROFISIOLOGIAS?\\b'), ' NEURO '))
        self.nome_abreviado_regex.append((re.compile('\\bNEUROL(OGIAS?|OGICAS?)?\\b'), ' NEURO '))
        self.nome_abreviado_regex.append((re.compile('\\bNOSSAS?\\b'), ' NSA '))
        self.nome_abreviado_regex.append((re.compile('\\bOBJETOS?\\b'), ' OBJ '))
        self.nome_abreviado_regex.append((re.compile('\\bOCUPACIONA(IS|L)?\\b'), ' OCUP '))
        self.nome_abreviado_regex.append((re.compile('\\bODONTOL(OGIAS?|OGICOS?|OGOS)?\\b'), ' ODONT '))
        self.nome_abreviado_regex.append((re.compile('\\bOFTALMOL(OGIAS?|OGICAS?)?\\b'), ' OFTALMO '))
        self.nome_abreviado_regex.append((re.compile('\\bONCO(LOGIAS?|LOGICAS?)?\\b'), ' ONC '))
        self.nome_abreviado_regex.append(
            (re.compile('\\bOPER(A([CD](AO|OES|IONAL|IONAIS|OR([EA])?S?)?)?)?\\b'), ' OP '))
        self.nome_abreviado_regex.append((re.compile('\\bORGAN(ICOS?|ISMOS?|IZ|IZACAO|IZACOES)?\\b'), ' ORG '))
        self.nome_abreviado_regex.append((re.compile('\\bORIENT(AL|AIS|ACAO|ACOES)?\\b'), ' ORIENT '))
        self.nome_abreviado_regex.append((re.compile('\\bORIG[IE](M|NAL|NAIS|ENS)?\\b'), ' ORIG '))
        self.nome_abreviado_regex.append((re.compile('\\bORNAMENT(ACAO|ACOES|OS?|AIS|AL)?\\b'), ' ORN '))
        self.nome_abreviado_regex.append((re.compile('\\bORTOPED(IAS?|ICOS?)?\\b'), ' ORT '))
        self.nome_abreviado_regex.append((re.compile('\\bOTIC[AO]S?\\b'), ' OTIC '))
        self.nome_abreviado_regex.append((re.compile('\\bPAGAMENTOS?\\b'), ' PAG '))
        self.nome_abreviado_regex.append((re.compile('\\bPA?GTO?\\b'), ' PAG '))
        self.nome_abreviado_regex.append((re.compile('\\bPAISAG(ISMOS?)?\\b'), ' PAIS '))
        self.nome_abreviado_regex.append((re.compile('\\bPALESTRAS?\\b'), ' PALEST '))
        self.nome_abreviado_regex.append((re.compile('\\bPALETES?\\b'), ' PAL '))
        self.nome_abreviado_regex.append((re.compile('\\bPANIFICADOR(AS?)?\\b'), ' PANIF '))
        self.nome_abreviado_regex.append((re.compile('\\bPAPEL(AR|ARIAS?|EIROS?)?\\b'), ' PAP '))
        self.nome_abreviado_regex.append((re.compile('\\bPARAFUSOS?\\b'), ' PARAF '))
        self.nome_abreviado_regex.append((re.compile('\\bPAROQUIAS?\\b'), ' PAROQ '))
        self.nome_abreviado_regex.append((re.compile('\\bPARTIC(I(P(AC(AO|OES)?)?)?)?\\b'), ' PART '))
        self.nome_abreviado_regex.append((re.compile('\\bPARTICULAR(ES)?\\b'), ' PART '))
        self.nome_abreviado_regex.append((re.compile('\\bPASSAPORTES?\\b'), ' PASSAP '))
        self.nome_abreviado_regex.append((re.compile('\\bPATOLOGI(CAS?|AS?)\\b'), ' PATOL '))
        self.nome_abreviado_regex.append((re.compile('\\bPATRIM(ON(IAIS|AL|IOS?)?)?\\b'), ' PATR '))
        self.nome_abreviado_regex.append((re.compile('\\bPAVIME(NTACAO|NTOS?|NTACOES)\\b'), ' PAV '))
        self.nome_abreviado_regex.append((re.compile('\\bPC[AS]S\\b'), ' PC '))
        self.nome_abreviado_regex.append((re.compile('\\bPECAS?\\b'), ' PC '))
        self.nome_abreviado_regex.append((re.compile('\\bPECUARI(AS?|STAS?)?\\b'), ' PECUAR '))
        self.nome_abreviado_regex.append((re.compile('\\bPEDAGOGI(AS?|C[AO]S?)?\\b'), ' PEDAG '))
        self.nome_abreviado_regex.append((re.compile('\\bPELETIZAC(AO|OES)?\\b'), ' PELET '))
        self.nome_abreviado_regex.append((re.compile('\\bPENTECOST(AL|AIS)?\\b'), ' PENT '))
        self.nome_abreviado_regex.append((re.compile('\\bPERFUM(ARIAS?)?\\b'), ' PERF '))
        self.nome_abreviado_regex.append((re.compile('\\bPERIFERIC([AO]S?)?\\b'), ' PERIF '))
        self.nome_abreviado_regex.append((re.compile('\\bPERIODIC([AO]S?)?\\b'), ' PERIOD '))
        self.nome_abreviado_regex.append((re.compile('\\bPESCA(DOS?)?\\b'), ' PESC '))
        self.nome_abreviado_regex.append((re.compile('\\bPESQUISA(DORA?|DOR[EA]S|S?)?\\b'), ' PESQ '))
        self.nome_abreviado_regex.append((re.compile('\\bPESS(OAL|OAIS|OAS)?\\b'), ' PES '))
        self.nome_abreviado_regex.append((re.compile('\\bPETISCOS?\\b'), ' PET '))
        self.nome_abreviado_regex.append((re.compile('\\bPETROLEOS?\\b'), ' PETROL '))
        self.nome_abreviado_regex.append((re.compile('\\bPILOT(AGEM|AGENS|OS?)\\b'), ' PILOT '))
        self.nome_abreviado_regex.append((re.compile('\\bPINTURAS?\\b'), ' PINT '))
        self.nome_abreviado_regex.append((re.compile('\\bPISCINAS?\\b'), ' PISC '))
        self.nome_abreviado_regex.append((re.compile('\\bPIZZ(ARIAS?)?\\b'), ' PIZ '))
        self.nome_abreviado_regex.append((re.compile('\\bPLANEJA(D[OA]S?|M|MENTOS?)?\\b'), ' PLAN '))
        self.nome_abreviado_regex.append((re.compile('\\bPLANTAS?\\b'), 'PL'))
        self.nome_abreviado_regex.append((re.compile('\\bPLAST(IC[AO]S?)?\\b'), 'PLAS'))
        self.nome_abreviado_regex.append((re.compile('\\bPNEUM[AO](TICOS?|NOLOGIAS?)?\\b'), 'PNEUM'))
        self.nome_abreviado_regex.append((re.compile('\\bPOLUENTES?\\b'), 'POL'))
        self.nome_abreviado_regex.append((re.compile('\\bPORT(ADO(RES?|R|RAS?)|AS?|OES)\\b'), 'PORT'))
        self.nome_abreviado_regex.append((re.compile('\\bPROVISORI[OA]S?\\b'), 'PROV'))
        self.nome_abreviado_regex.append((re.compile('\\bPRECIS(AO|OES)\\b'), 'PREC'))
        self.nome_abreviado_regex.append((re.compile('\\bPRESBITERO?(IANAS?)?\\b'), 'PRESB'))
        self.nome_abreviado_regex.append((re.compile('\\bPRES(ENTES?|IDENTES?)\\b'), 'PRES'))
        self.nome_abreviado_regex.append((re.compile('\\bPRESTA(CAO|COES|DOR[AE]S?)\\b'), 'PREST'))
        self.nome_abreviado_regex.append((re.compile('\\bPREV(IDENCIARIOS?|ENCAO|ENCOES|IDENCIAS?)?\\b'), 'PREV'))
        self.nome_abreviado_regex.append((re.compile('\\bPRIM(EIR[AO]S?|ARIOS?)?\\b'), 'PRIM'))
        self.nome_abreviado_regex.append((re.compile('\\bPROCESS(AMENTOS?|OS?)\\b'), 'PROC'))
        self.nome_abreviado_regex.append((re.compile('\\bPROCTOLO(GIAS?|GISTAS?)\\b'), 'PROCTO'))
        self.nome_abreviado_regex.append((re.compile('\\bPRODU(CAO|COES|TOS?)?\\b'), 'PROD'))
        self.nome_abreviado_regex.append((re.compile('\\bPROF[EI]SS(IONALIZANTES?|ORES|OR|IONA[IL]S?)?\\b'), 'PRO'))
        self.nome_abreviado_regex.append((re.compile('\\bPROGRAMA(DORAS?|OR|CAO|COES)\\b'), 'PROGRAM'))
        self.nome_abreviado_regex.append((re.compile('\\bPROJETOS?\\b'), 'PROJ'))
        self.nome_abreviado_regex.append((re.compile('\\bPROMO(CAO|COES|TORAS?)\\b'), 'PROM'))
        self.nome_abreviado_regex.append((re.compile('\\bPROPAGANDAS\\b'), 'PROPAG'))
        self.nome_abreviado_regex.append((re.compile('\\bPROPRIETARIOS?\\b'), 'PROP'))
        self.nome_abreviado_regex.append((re.compile('\\bPROTE(SES?|CAO|COES)\\b'), 'PROT'))
        self.nome_abreviado_regex.append((re.compile('\\bPROVISORIA\\b'), 'PROV'))
        self.nome_abreviado_regex.append((re.compile('\\bPSICO(LOGICOS?|LOGOS?|TECNICOS?|TERAPIA)?\\b'), 'PSICO'))
        self.nome_abreviado_regex.append((re.compile('\\bPSIQUIATRI(A|COS?)\\b'), 'PSIQ'))
        self.nome_abreviado_regex.append((re.compile('\\bPUBLIC(OS?|IDADES?|ACAO|ACOES)?\\b'), 'PUBL'))
        self.nome_abreviado_regex.append((re.compile('\\bQTAS\\b'), 'QTA'))
        self.nome_abreviado_regex.append((re.compile('\\bQUALIDADES?\\b'), 'QUALID'))
        self.nome_abreviado_regex.append((re.compile('\\bQUIMIC[AO]S?\\b'), 'QUIM'))
        self.nome_abreviado_regex.append((re.compile('\\bQUITANDAS?'), 'QUIT'))
        self.nome_abreviado_regex.append((re.compile('\\bQUOTAS?'), 'QTA'))
        self.nome_abreviado_regex.append((re.compile('\\bRADIO(LOGIAS?|LOGIC[AO]S?)?\\b'), 'RAD'))
        self.nome_abreviado_regex.append((re.compile('\\bRAPID[AO]S?\\b'), 'RAP'))
        self.nome_abreviado_regex.append((re.compile('\\bREABILITAC(AO|OES)\\b'), 'REAB'))
        self.nome_abreviado_regex.append((re.compile('\\bRECAUCHUTAGEM\\b'), 'RECAU'))
        self.nome_abreviado_regex.append((re.compile('\\bRECICLAGE[MN]S?\\b'), 'RECIC'))
        self.nome_abreviado_regex.append((re.compile('\\bRECONDICIONAMENTOS?'), 'RECOND'))
        self.nome_abreviado_regex.append((re.compile('\\bRECREAC(AO|OES)\\b'), 'RECR'))
        self.nome_abreviado_regex.append((re.compile('\\bRECU(RSOS?|PERACAO|PERACOES|PERADORAS?)\\b'), 'REC'))
        self.nome_abreviado_regex.append((re.compile('\\bRECURSOS\sHUMANOS\\b'), 'RH'))
        self.nome_abreviado_regex.append((re.compile('\\bREFORMAS?\\b'), 'REF'))
        self.nome_abreviado_regex.append((re.compile('\\bREFRIGERA(NTES?|DOS?|CAO|COES)\\b'), 'REFR'))
        self.nome_abreviado_regex.append((re.compile('\\bREGISTOS?\\b'), 'REG'))
        self.nome_abreviado_regex.append((re.compile('\\bREGULA(CAO|COES|GE[NM]S?|TORIOS?)\\b'), 'REGUL'))
        self.nome_abreviado_regex.append((re.compile('\\bRELIGI(AO|OES|OSOS?)\\b'), 'RELIG'))
        self.nome_abreviado_regex.append((re.compile('\\bRELOJOARIAS?\\b'), 'RELOJ'))
        self.nome_abreviado_regex.append((re.compile('\\bREND(AS?|IMENTOS?)\\b'), 'REND'))
        self.nome_abreviado_regex.append((re.compile('\\bREP(OUSOS?|AROS?)?\\b'), 'REP'))
        self.nome_abreviado_regex.append((re.compile('\\bREPRESENT(ANTES?|AC(AO|OES?))?\\b'), 'REP'))
        self.nome_abreviado_regex.append((re.compile('\\bRESID(ENCIA[LI]S?|UOS?)?\\b'), 'RES'))
        self.nome_abreviado_regex.append((re.compile('\\bRESSEGUROS?\\b'), 'RESSEG'))
        self.nome_abreviado_regex.append((re.compile('\\bRESTAURA(NTES?|C(AO|OES))?'), 'REST'))
        self.nome_abreviado_regex.append((re.compile('\\bRETENTOR(ES)?\\b'), 'RETENT'))
        self.nome_abreviado_regex.append((re.compile('\\bREUMATO(LOGIAS?)?'), 'REUMAT'))
        self.nome_abreviado_regex.append((re.compile('\\bREVENDEDOR(AS?|ES)?\\b'), 'REVEND'))
        self.nome_abreviado_regex.append((re.compile('\\bREVESTIMENTOS?\\b'), 'REVEST'))
        self.nome_abreviado_regex.append((re.compile('\\bREVISTAS?\\b'), 'REVST'))
        self.nome_abreviado_regex.append((re.compile('\\bRODOV(IAS?|IARIOS?)?\\b'), 'ROD'))
        self.nome_abreviado_regex.append((re.compile('\\bROLAMENTOS?'), 'ROLAMEN'))
        self.nome_abreviado_regex.append((re.compile('\\bROTULOS?\\b'), 'ROTUL'))
        self.nome_abreviado_regex.append((re.compile('\\bRURA[IL]S?\\b'), 'RUR'))
        self.nome_abreviado_regex.append((re.compile('\\bSALGADOS?'), 'SALG'))
        self.nome_abreviado_regex.append((re.compile('\\bSANITARI[AO]S?\\b'), 'SANIT'))
        self.nome_abreviado_regex.append((re.compile('\\bSANTOS?\\b'), 'STO'))
        self.nome_abreviado_regex.append((re.compile('\\bSECRET(ARI[OA]S?)?\\b'), 'SEC'))
        self.nome_abreviado_regex.append((re.compile('\\bSECURITIZAC(AO|OES)\\b'), 'SECURIT'))
        self.nome_abreviado_regex.append((re.compile('\\bSEGUR[OA]S?(NCAS?|DORA?)?\\b'), 'SEG'))
        self.nome_abreviado_regex.append((re.compile('\\bSENHOR(ES)?\\b'), 'SR'))
        self.nome_abreviado_regex.append((re.compile('\\bSENHORAS?\\b'), 'SRA'))
        self.nome_abreviado_regex.append((re.compile('\\bSERIGRAFIAS?'), 'SERIG'))
        self.nome_abreviado_regex.append((re.compile('\\bSERVICOS?\sESPECIALIZADOS?\sEM'), 'SERVESPEM'))
        self.nome_abreviado_regex.append((re.compile('\\bSERVICOS?\\b'), 'SERV'))
        self.nome_abreviado_regex.append((re.compile('\\bSIMILARES?\\b'), 'SIMIL'))
        self.nome_abreviado_regex.append((re.compile('\\bSINALIZAC(AO|OES)?'), 'SINAL'))
        self.nome_abreviado_regex.append((re.compile('\\bSINTETICOS?\\b'), 'SINTET'))
        self.nome_abreviado_regex.append((re.compile('\\bSIST(EMAS?)?\\b'), 'SIS'))
        self.nome_abreviado_regex.append((re.compile('\\bSOCI(A[IL]S?|EDADES?)?\\b'), 'SOC'))
        self.nome_abreviado_regex.append((re.compile('\\bSOCIEDADES?\sCIVI[SL]?\\b'), 'SC'))
        self.nome_abreviado_regex.append((re.compile('\\bSOCIEDADE?\sSIMPLES?\\b'), 'SS'))
        self.nome_abreviado_regex.append((re.compile('\\bSOFTWARES?\\b'), 'SOFT'))
        self.nome_abreviado_regex.append((re.compile('\\bSOLUC(AO|OES)\\b'), 'SOL'))
        self.nome_abreviado_regex.append((re.compile('\\bSONO(GRAFIAS?|RIZAC(AO|OES))\\b'), 'SON'))
        self.nome_abreviado_regex.append((re.compile('\\bSOROCABA\\b'), 'SOROC'))
        self.nome_abreviado_regex.append((re.compile('\\bSORVETES?(RIA)?\\b'), 'SORV'))
        self.nome_abreviado_regex.append((re.compile('\\bSOUVENIRS?\\b'), 'SOUV'))
        self.nome_abreviado_regex.append((re.compile('\\bSUBSTANCIAS?\\b'), 'SUBST'))
        self.nome_abreviado_regex.append((re.compile('\\bSUCATAS?\\b'), 'SUC'))
        self.nome_abreviado_regex.append((re.compile('\\bSUPERMERCADOS?\\b'), 'SUPERMERC'))
        self.nome_abreviado_regex.append((re.compile('\\bSUPERVIS(AO|OES)\\b'), 'SUPERV'))
        self.nome_abreviado_regex.append((re.compile('\\bSUPLEMENT[OA][RS]*\\b'), 'SUPL'))
        self.nome_abreviado_regex.append((re.compile('\\bSUPRI[M]?(ENTOS?)?\\b'), 'SUPR'))
        self.nome_abreviado_regex.append((re.compile('\\bSUSPENS[AO][OE]S?\\b'), 'SUSP'))
        self.nome_abreviado_regex.append((re.compile('\\bSUSTENTA(VE[IL]S?|BILIDADES?)?\\b'), 'SUST'))
        self.nome_abreviado_regex.append((re.compile('\\bTABAC[AO]S?(RIAS?)?\\b'), 'TABAC'))
        self.nome_abreviado_regex.append((re.compile('\\bTABEL(I[AO][OE]S?)?\\b'), 'TAB'))
        self.nome_abreviado_regex.append((re.compile('\\bTAPEC?(ARIAS?|TES?)\\b'), 'TAP'))
        self.nome_abreviado_regex.append((re.compile('\\bTECN(ICOS?|OL(OGI[AC]O?S?))?\\b'), 'TEC'))
        self.nome_abreviado_regex.append((re.compile('\\bTECEL(AGE[MN]S?)?\\b'), 'TEC'))
        self.nome_abreviado_regex.append((re.compile('\\bTELEATENDIMENTOS?\\b'), 'TELEAT'))
        self.nome_abreviado_regex.append((re.compile('\\bTELECOMUN(ICAC[AO][OE]S?)?\\b'), 'TELECOM'))
        self.nome_abreviado_regex.append((re.compile('\\bTELEF(ONIAS?|ONICOS?)\\b'), 'TEL'))
        self.nome_abreviado_regex.append((re.compile('\\bTELEMARKETING\\b'), 'TELEM'))
        self.nome_abreviado_regex.append((re.compile('\\bTEMPORARI[OA]S?\\b'), 'TEMP'))
        self.nome_abreviado_regex.append((re.compile('\\bTERAP(IAS?|EUTICOS?)\\b'), 'TERAP'))
        self.nome_abreviado_regex.append((re.compile('\\bTERMINA[IL]S?\\b'), 'TERM'))
        self.nome_abreviado_regex.append((re.compile('\\bTERMOPLASTICOS?\\b'), 'TERMOPL'))
        self.nome_abreviado_regex.append((re.compile('\\bTERRAPLANAGEM\\b'), 'TERRAPL'))
        self.nome_abreviado_regex.append((re.compile('\\bTEXT[EI][IL]S?\\b'), 'TEXT'))
        self.nome_abreviado_regex.append((re.compile('\\bTINGIMENTOS?\\b'), 'TING'))
        self.nome_abreviado_regex.append((re.compile('\\bTINTURARIAS?\\b'), 'TINT'))
        self.nome_abreviado_regex.append((re.compile('\\bTOPGRAF(IA|ICOS?)?\\b'), 'TOP'))
        self.nome_abreviado_regex.append((re.compile('\\bTRABALHO?(ADORA?(ES)?)?\\b'), 'TRAB'))
        self.nome_abreviado_regex.append((re.compile('\\bTRADU(TOR[E]?S?|C[AO][OE]S?)?\\b'), 'TRAD'))
        self.nome_abreviado_regex.append((re.compile('\\bTRANSFORMADOR(ES)?\\b'), 'TRANSF'))
        self.nome_abreviado_regex.append((re.compile('\\bTRANS[P]?(ITOS?|ORTADOR([AE]S?)?|ORTES?|RT)?\\b'), 'TRANS'))
        self.nome_abreviado_regex.append((re.compile('\\bTRAT[AO](R(ES)?|MENTOS?)?\\b'), 'TRAT'))
        self.nome_abreviado_regex.append((re.compile('\\bTRAUMA(TOLOGIAS?|TOLOGICOS?)\\b'), 'TRAUM'))
        self.nome_abreviado_regex.append((re.compile('\\bTREINAM(ENTO?)?\\b'), 'TREIN'))
        self.nome_abreviado_regex.append((re.compile('\\bTRIBUT(OS|ARI[AO]S?|ACAO)?\\b'), ''))
        self.nome_abreviado_regex.append((re.compile('\\bTURIS(TIC[AO]S?|MOS?)?\\b'), 'TUR'))
        self.nome_abreviado_regex.append((re.compile('\\bUNIDADES?\\b'), 'UNID'))
        self.nome_abreviado_regex.append((re.compile('\\bUNIFORMES?\\b'), 'UNIF'))
        self.nome_abreviado_regex.append((re.compile('\\bUNIVERS(AL?|IDADES?)?\\b'), 'UNIV'))
        self.nome_abreviado_regex.append((re.compile('\\bURBAN[O]?(ISMO[S]?|ISTIC[AO][S]?|IZACAO)?\\b'), 'URB'))
        self.nome_abreviado_regex.append((re.compile('\\bUROLOG(IA|ICA)?\\b'), 'UROL'))
        self.nome_abreviado_regex.append((re.compile('\\bUSIN[A]?(S|GEM)?\\b'), 'USIN'))
        self.nome_abreviado_regex.append((re.compile('\\bUTENS(SILIOS?)?\\b'), 'UTEN'))
        self.nome_abreviado_regex.append((re.compile('\\bUTILIDADES?\\b'), 'UTIL'))
        self.nome_abreviado_regex.append((re.compile('\\bVALVULAS?\\b'), 'VAL'))
        self.nome_abreviado_regex.append((re.compile('\\bVAREJ(ISTAS?|OS?)\\b'), 'VAR'))
        self.nome_abreviado_regex.append((re.compile('\\bVEDAC[AO][OE]??\\b'), 'VED'))
        self.nome_abreviado_regex.append((re.compile('\\bVEGETA[IL]S?\\b'), 'VEG'))
        self.nome_abreviado_regex.append((re.compile('\\bVEICUL(AR|OS?)?\\b'), 'VEI'))
        self.nome_abreviado_regex.append((re.compile('\\bVESTUARI[AO]S?\\b'), 'VEST'))
        self.nome_abreviado_regex.append((re.compile('\\bVETE(RINARI[AO]S?|RINS?)?\\b'), 'VET'))
        self.nome_abreviado_regex.append((re.compile('\\bVIAGE[MNS]*\\b'), 'VIAG'))
        self.nome_abreviado_regex.append((re.compile('\\bVIDR(ACARIAS?|OS?)?\\b'), 'VID'))
        self.nome_abreviado_regex.append((re.compile('\\bVIGILA(NTES?|NCIAS?)?\\b'), 'VIGIL'))
        self.nome_abreviado_regex.append((re.compile('\\bVILAS?\\b'), 'VIL'))
        self.nome_abreviado_regex.append((re.compile('\\bVISUA(L|AIS)?\\b'), 'VIS'))
        self.nome_abreviado_regex.append((re.compile('\\bVOLUNTARI[AO]S?\\b'), 'VOLUNT'))

    def create_regex_nome_corrigido(self):
        flags = re.I | re.M | re.U | re.X
        self.nome_corrigido_regex.append((re.compile('\\bVOL\\b'), ''))
        self.nome_corrigido_regex.append((re.compile('[ \-]S[\.\/ \-]*A[\.,\-]*($| )+'), ' SA '))
        self.nome_corrigido_regex.append((re.compile('[ \-]S[\.\/ \-\?]*C[\.,\-]*($| )+'), ' SC '))
        self.nome_corrigido_regex.append((re.compile('[ \-]S[\.\/ \-\?]*S[\.,\-]*($| )+'), ' SS '))
        self.nome_corrigido_regex.append((re.compile('[ \-]M[\.\/ \-\?]*E[\.,\-]*($| )+'), ' ME '))
        self.nome_corrigido_regex.append(
            (re.compile(r"[\s-]M[\.\/\s\-\?\\]*E[\.\/\s\-\?\\]*I([\.,\-\s$]+|$)"), ' MEI '))
        self.nome_corrigido_regex.append(
            (re.compile(r"[\s-]E[\.\/\s\-\?\\]*P[\.\/\s\-\?\\]*P([\.,\-\s$]+|$)"), ' EPP '))
        self.nome_corrigido_regex.append(
            (re.compile(r"[ \-]L[\.\/ \-\?\\]*T([\.\/ \-\?\\]*D[\.\/ \-\?\\]*A)?([\.,\- $]+|$)"), ' LTDA '))
        self.nome_corrigido_regex.append((re.compile(
            r"[ \-]E[\.\/ \-\?\\]*I[\.\/ \-\?\\]*R[\.\/ \-\?\\]*E[\.\/ \-\?\\]*L[\.\/ \-\?\\]*(L[\.\/ \-\?\\]*)?I([\.,\- $]+|$)"),
                                          ' EIRELLI '))
        self.nome_corrigido_regex.append((re.compile(r"RESPOSTA\s*DE\s*OFICIO\s*NO(\s*\d+\/?\d+\s*E?)*"), ''))
        self.nome_corrigido_regex.append(
            (re.compile(r'\"?\s*EM\s*(REC\.?(UPERACAO)?|LIQUIDACAO)\s*(EXTRA)?\s*JUD(ICIAL)?\.?\s*\"?'), ''))
        self.nome_corrigido_regex.append(
            (re.compile('(\s+((LTDA|ME|EPP|EIRELI|SC)\s)+)(FL|FILIAL|FIL|LOJA|LJ|MATRIZ|AG|POSTO)\s.*'), '\\1'))
        self.nome_corrigido_regex.append((re.compile('HABILITA(CAO|NTE) +M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})( +-?\s*|$)'), ''))
        self.nome_corrigido_regex.append((re.compile('[\(\[]\s*FAL(IDO|ENCIA DECRETADA)\s*[\)\]]'), ''))
        self.nome_corrigido_regex.append((re.compile('[\(\[]\s*INC\.?\s*\d+\s*[\)\]]'), ''))
        self.nome_corrigido_regex.append((re.compile('H\.?C\.?\s*N\.?O\.?\s*\d+'), ''))
        self.nome_corrigido_regex.append((re.compile('\\bREPR(\.|ESENTANTE)\s*LEGAL\\b'), ''))
        self.nome_corrigido_regex.append((re.compile(
            '(^|[-, \(]+)(INCIDENTE)?\s*[-,]?(HAB\s*CARTA DE)?\s*HAB($|\.| |\d|ILIT(AD[AO]S?|ANTES?|ACOES|ACAO|\.)|\.?RETAR|\.?CRED|IL NO)\s*(DE)?\s*(CRED[\.\w]*)?\s*[-,]?\s*(INC[\.\w]*)?\s*\-?\s*(N|CODIG)?O?\.?\s*[\d\-:\/*\)]*[-\( ]*(CANCELAD[AO])?[-\) \.,]*'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile('([\-\( ]*(EM)|[-\(]|(EM)) REC[\.\w]*\s*JUD[\.\w]*\s*\).*?'), ''))
        self.nome_corrigido_regex.append((re.compile('[\.,\- ]*(FLS?\s*\d+\s*\d*\s*E?)'), ''))
        self.nome_corrigido_regex.append(
            (re.compile('^[\-\(]?\s*\(?\s*?M([\.]|ASSA)?S?\s*FALIDAS?\s*\)?\s*(-\s*|D[EAO])?\s*\)?\s*'), ''))
        self.nome_corrigido_regex.append((re.compile(
            '[\- \(\[]*\s*((SIND\w*|CRED\w*|EMPREGAD\w*)\s*D\w*)?\s*(EMPRESA|M([\.,]?|A[SD]*A))?\(?\s*(PELA)?\s*FALIDA[\)\] ]*\s*(-\s*|D[EAO])?[\) ]*'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile(
            '[\(\- \:\[]*([PO]F[ \.]*[\d\/]*)?[ \,\.\:\;]*(FL\s*[\d\/]*)?[\(\- \:\[]*DEC[\.\w\-]+\s*A?\s*FAL[\.\w\-]+\s*(EM)?\s*[\d\-:\/*\) \],ASHO]*.*'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile(
            '( [\-\(]?\s*DRT?.\s*MARC\s*O\s*)[\-\(]?\s*P?[\/?;? ]*H[\.,]*C\.?\s*\-?\s*\d+\/?\d*\-?\w*\)?\s*(P[FB]\s*\d+)?[\-\+\( ,?;]*\s*FLS?\.?\s*(\d*\.*\/*\s*O*)*[\- ,\.]*(VO?)?L?\.?\s*(\d*\.*\/*\s*)*(OBJ)?(\s*E\s*\d*)?\)?\s*(IMP\.)?\s*\d*'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile(
            '\s*(P[FB]\s*[O\d]+)?[\-\+\( ,?;]*\s*(FLS?\.?\s*\d+(\d*\.*\/*\s*O*)+[\- ,\.]*(VO?)?L?\.?\s*(\d*\.*\/*\s*)*(OBJ)?(\s*E\s*\d*)?\)?\s*(IMP\.)?\s*\d*)+$'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile(
            '\s*(DECRETAD\w)?\s*(EM)?\s*(\d+\s*\w+\s*\d+)? +P[FB]\s*(\d+\s*)+[ ,]*(FL)?S?\s*\d*[\: ]*(DECRETAD\w)?\s*A?\s*(FAL\w*)?'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile(
            ' +[\+\- ]*((FL)?S?|IMP)?[\. \-]*\d*\s*[\,\-\(]?\s*[EP]?\/?\s*H[\.,]*C\.?\s*\-?\s*\d+\/?\d*\-?\w*\)?\s*[\,\-\(]?\s*(PROC)?\s*[\,\-\(\;]?\s*(FL)?S?\.?\s*\d*\s*'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile('\dV +\d+\/?\d+'), ''))
        self.nome_corrigido_regex.append((re.compile('[ \(\-]+OAB\s*\w{0,2}\s*(NO)?\s*\d+\s*\d+\s*\w{2}(\)| |$)'), ''))
        self.nome_corrigido_regex.append((re.compile(
            '\s*[-,]?\s*(INCIDENTE)?\s*[-,]?\s*HA?[BC][\.\w]*\s*(DE)?\s*(CRED[\.\w]*)?\s*[-,]?\s*(INC[\.\w]*)?\s*\-?\s*(N|CODIG)?O?\.?\s*\d+\s*[\d\-:\/*\)]*[-\(]*(CANCELAD[AO])?[-\) \.,]*'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile(
            '[- \(,\.]*(PETICAO|RESERVA|IMPUGNACAO)?\s*(NO)?\s*(HAB[\/\.\w]*)?\s*(D[OEA])?\s*(CRED[\.\w]*)?\s*[- \(]*INCIDENTES?\s*\d*\s*\)?\s*[- \(,\.]*(PETICAO|RESERVA|IMPUGNACAO)?\s*(NO)?\s*(HAB[\.\w]*)?\s*(D[OEA])?\s*(CRED[\.\w]*)?\s*N?[\.,]*\s*\d*\s*\.?'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile('\s*[\-\( ]*C[GD][AC]\s*[\.\:]?\s*[\d\/\.\-]+[\-\) ]*$'), ''))
        self.nome_corrigido_regex.append((re.compile('\s*\\*\-+\s*(IMP|PROC)?\.?[ \-+]*[\d\/\-]+[\- ]*$'), ''))
        self.nome_corrigido_regex.append(
            (re.compile('(PROCDOR.?\s*:.*|SINDIC.\\s*(DAT\w*)?\s*:.*|OBSERVACAO\s*:.*)'), ''))
        self.nome_corrigido_regex.append(
            (re.compile('(CUR(ESP|ADOR)\s*:.*|DEF\w*\.? PUB\w*\.?\s*:.*|INVTANTE\s*:.*)'), ''))
        self.nome_corrigido_regex.append((re.compile('(CGC\s*:.*|REP\s*:.*|ASSISTACUS\s*:.*|ADM\w*\.?\s*:.*)'), ''))
        self.nome_corrigido_regex.append((re.compile('(PREP\w*\.?\s*:.*|PERIT.\s*:.*|NA PESSOA D. SEU.*)'), ''))
        self.nome_corrigido_regex.append((re.compile('(CEDENTE\s*:.*|RE(CLAM|PR)\w*\.?\s*:.*|PROMO\w*\.?\s*:.*)'), ''))
        self.nome_corrigido_regex.append((re.compile(
            '(ATUAL DENOMINACAO\s*\:.*|CREDOR.?\s*\:.*|INVENT\w*\s*\:.*|SOCI.{1,2}?\s*\:.*|COMISS\s*:.*|DATA DA QUEBRA\s*\:?.*|FIRMA FALIDA:)'),
                                          ''))
        self.nome_corrigido_regex.append((re.compile('[\\\/,;<>\.\?\/\!\*\-\+\_\=\@\#\%:\(\)'']+'), ' '))
        self.nome_corrigido_regex.append(
            (re.compile('(\sREF\w*)?(\sAO)?\s*PROC\s(NO\s)?([\dA]|\s)+(R?T|\s)*(NO\s)?\d*'), ' '))
        # self.nome_corrigido_regex.append((re.compile('(\s*\-*\(*)*(NOMEADO\s(AS)?\s)?FLS?\.?\s*\d(\d*\s*\,*\-*\/*\;*\.*)+(E\s)?\d*\s*(O?\s?VOL?\.?(\s|\d+|$)*)?\)?(H?(\s|$))?',flags=flags), ''))
        self.nome_corrigido_regex.append((re.compile('\s*PROC +\d+'), ' '))
        self.nome_corrigido_regex.append((re.compile('\s+\d+$'), ' '))
        self.nome_corrigido_regex.append((re.compile('\(\)'), ''))
        self.nome_corrigido_regex.append((re.compile('&(AMP)?;?'), ' E '))
        self.nome_corrigido_regex.append((re.compile(r'( [0-9]+)+$'), ''))
        self.nome_corrigido_regex.append((re.compile('\s{2,}'), ' '))
        self.nome_corrigido_regex.append((re.compile('^\s+'), ''))
        self.nome_corrigido_regex.append((re.compile('\s+$'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?INCIDENTE.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?REPR.(POR|PELA).*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?REPR?.\s?(POR|PELA).*'), ''))
        self.nome_corrigido_regex.append((re.compile('ESPOLIO(\sDE\s)?'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?(CUJO )?NOME\sFANTASIA.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?(POR (SEU |SUA ))?INVENTARIANTE.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?ADVOGADOS?( DAS)?.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?DIVERSOS.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?POR VERIFICAR.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?IMPUGNANTES?.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?KSURE'), ''))
        self.nome_corrigido_regex.append((re.compile('SUCURSAL((DE)? MONTEVIDEL (DO)?)?'), ''))
        self.nome_corrigido_regex.append((re.compile('[\(\[]?FILIAL.*'), ''))
        self.nome_corrigido_regex.append((re.compile('[\(\[]?ANTIGO.*'), ''))
        self.nome_corrigido_regex.append((re.compile('(TAMBEM )?CONHECID[AO] POR.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?(ATUAL|NA QUA.*)?\s?SUCESSOR.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?CONTR(ATOS)? FIRMADOS.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\d{2,}[A-Z]\d{2,}'), ''))
        self.nome_corrigido_regex.append((re.compile('CURESP'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?PROCESSOS? (NO)?\s?\d+/?(\d+)?'), ''))
        self.nome_corrigido_regex.append((re.compile('(\(?FALENCIA)? DECRETADA EM.*'), ''))
        self.nome_corrigido_regex.append((re.compile('(TAMBEM)? CONHECID[OA].*'), ''))
        self.nome_corrigido_regex.append((re.compile('[\[\(]?CNPJ.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?(ATUAL|INCORPORADOR E|NA QUA.*)? SUCESSORA?.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(PEL[AO]\sPROCURADORA?'), ''))
        self.nome_corrigido_regex.append((re.compile('PROCURADORIA\sSECCIONAL\s.*'), ''))
        self.nome_corrigido_regex.append((re.compile('[\[\(]?INCLUID[AO].*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(LEILOEIRO OFICIAL\)'), ''))
        self.nome_corrigido_regex.append((re.compile('\(\s?CESSIONARIA.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\[\s?FALENCIA\sDECRETA\s?]'), ''))
        self.nome_corrigido_regex.append((re.compile('\\bREQUERENTES?\\b'), ''))
        self.nome_corrigido_regex.append((re.compile('\[?\s?EM\sFASE\s(DE)?EXECUCAO.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\[?\sDESCONSIDERADA.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\[/s?EXECUCAO\sDE\sTITUTO\sEXTRAJUDICIAL.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(\D{0,10}RECONVIN(TE|D[OA]).*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(CONF\.'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?\s?INICIO\s?.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?REQDA.*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?ALTERA(CAO|D[OA]COES).*'), ''))
        self.nome_corrigido_regex.append((re.compile('\(?ANOTAD[OA].*'), ''))

    def create_regex_nome_classe_corrigido(self):
        flags = re.I | re.M | re.U | re.X
        # ["TITULO *(EXECUTIVO)? *EXTR?A\-?JUDICIAL","MONITORIA","DESPEJ","BUSC.*APREE?N.*ALIEN","USUCAP","ALUG|LOCAC!DESPEJ","EXEC.*ALIMENTO","ALIMENTO!EXEC"]
        self.nome_classe_corrigido_regex.append((re.compile('TITULO *(EXECUTIVO)? *EXTR?A\-?JUDICIAL'), 'TITEXEC'))
        self.nome_classe_corrigido_regex.append((re.compile('MONIT'), 'MONIT'))
        self.nome_classe_corrigido_regex.append((re.compile('DESPEJ'), 'DESPEJO'))
        self.nome_classe_corrigido_regex.append((re.compile('BUSC.*APREE?N.*ALIEN'), 'BUSCAP'))
        self.nome_classe_corrigido_regex.append((re.compile('USUCAP'), 'USUCAP'))
        self.nome_classe_corrigido_regex.append((re.compile('ALUG|LOCAC'), 'ALUG'))
        self.nome_classe_corrigido_regex.append((re.compile('EXEC.*ALIMENTO'), 'EXECALIM'))
        self.nome_classe_corrigido_regex.append((re.compile('ALIMENTO'), 'ALIM'))

    def limpa_texto_para_movimento_e_diario_para_quadro_credor(self,texto):
        texto_movimento = re.sub('A?\s*\(?FL((S\.?)|(\.))\s*((\d\/?)+(\sE\s)?)*\)?([;,]?\s*(EM)?\s*\d{1,2}\/\d{1,2}\/\d{2,4},?)?','',texto.upper()) #FLS
        texto_movimento = re.sub('(PROC(ESSO|\.?)\s*(NO)?\s*)?\\b\d{2,8}[\-\.]\s*\d{2}[,\.]\d{4}\.(\d\.)?(\d{2}\.)?\d{4}', '', texto_movimento) #PROC. NO xxxxx
        texto_movimento = re.sub('\(?(PROC(ESSO|\.?)\s*(NO)?|HABILITACAO)\s*\d{6}[,\.]\d{4}\.(\d\.)?(\d{2}\.)?\d{4}\)?', '', texto_movimento) #PROC. NO xxxxx
        texto_movimento = re.sub('\\b(PROC(ESSO|\.?)\s*(NO)?\s*).\s*[\d\-\.]+', '', texto_movimento) #PROC. NO xxxxx
        texto_movimento = re.sub('(\(? ?ART\.?\s?\d{2,4}\,?\s?\w{0,3}\,?\s?)?LEI\s*(FEDERAL \s*)?(N\.?\s?O?\.? )?\d+\.?\d+([\/\-]\d*)?\)?', '', texto_movimento) #Lei 11.101
        texto_movimento = re.sub('(\(? ?ART\.?\s?\d{2,4}\,?\s?\w{0,3}\,?\s?)\)?((CDA |A )?(DA )?LRF)?', '', texto_movimento) #ARTIGOS
        texto_movimento = re.sub('\s*OAB\s?([\/\-]?\s*\w{2})?[\.\s\-]*\d+[\.\s]*\d+', '', texto_movimento) # número da OAB
        texto_movimento = re.sub('\\bN.?O? \d+([\d\.\/\- E])+', '', texto_movimento) # número da OAB
        texto_movimento = re.sub('CEP[\s\:]*\d{2}\.?\d{3}\-\d{3}', '', texto_movimento) # CEP
        #Não sei qual dos dois regex abaixo utilizar. O primeiro eu fiz, mas é lento, o segundo é restritivo, não funciona casos como 11.581,00% Apenas 2 casas antes da vírgula
        if re.search('\d+\%',texto_movimento):
            texto_movimento = re.sub('\-?\s*(\d*[\.,]?)*\d+\%', '', texto_movimento) # PORCENTAGEM
        # texto_movimento = re.sub('(?:(?:\d{1,2}(?:[\.,]\d+)?\-)?(?:(?:\d{1,2}(?:[,\.]\d+)?)|100))%', '', texto_movimento) # PORCENTAGEM
        texto_movimento = re.sub('(AJUSTES)?[\s\;\-:]*VALOR+\s+(APURADO|INFORMADO)+\s+PEL[AO]+\s+(ADMINISTRADOR|DEVEDORA?)', '', texto_movimento) # REGEX DO BRUNO, se der merda, culpe ele.
        texto_movimento = re.sub('CNPJ (N\.?\s?O?\.? )?(\d{2}[ \.]\d{3}[ \.]\d{3}[ \/]+\d{4}[ -]+\d{2})', '', texto_movimento) # CNPJ
        texto_movimento = re.sub('CPF\s*([\-\s\/]MF|(N\.?\s?O?\.?\s*)?)?\s*\d{3}\.\d{3}\.\d{3}\-\d{2}', '', texto_movimento) # CPF
        texto_movimento = re.sub('\\b(\d{5}[\.-]\d{4}[\.-]\d{3}[\.-]\d{2}[\.-]\d(\d\-?\d)?|\d{7}[\.-]\d{2}[\.-]\d{4}[\.-]\d[\.-]\d{2}[\.-]\d{4})\\b', '', texto_movimento) # Numero do processo do trabalho
        texto_movimento = re.sub('(R(EGISTRO)?\s*G(ERAL)?|IDENTIDADE)\s*(N\.?\s?O?\.?\s*)?[\d\.\-]+\s*([A-Z]{2,5}[\/\-][A-Z]{2})?', '', texto_movimento) # RG
        texto_movimento = re.sub('INSCRICAO ESTADUAL (N\.?\s?O?\.? )?(\d{3}[ \.]\d{3}[ \.]\d{3}[.]+\d{3})', '', texto_movimento) # Inscricao estadual
        texto_movimento = re.sub('(\d{6,7}\-?\d{2}\.\d{4}\.\d\.\d{2}\.\d{4})|(\d{3}\.\d{2}\.\d{4}\.\d{6}(\-\d\/\d{6}\-\d{3})?)|(\d{3}\.\d{2,4}\.\d{6}\-?\d?)', '', texto_movimento) # NPU do processo
        texto_movimento = re.sub('\W*EQUIPARADO A CLASSE \w+\W*','',texto_movimento)
        texto_movimento = re.sub('INSCRIC(AO|OES)\s*CADASTRA(IS|L)\s*(N(O\.?|UMERO))?[^A-Z]*','',texto_movimento)
        texto_movimento = re.sub('MATRICULA(S|D[OA])?\s*((SOB\s*)?O?\s*N(O\.?|UMERO))?([^A-Z]*\s*(\\bE\\b)?)*','',texto_movimento)
        texto_movimento = re.sub('\\bPROC\.?\s+[\d\.\-]+','',texto_movimento)
        texto_movimento = re.sub('S U B ?\Q U I R O G R A F [ÁA] R I [OA]( S)?', 'SUB-QUIROGRAFARIOS', texto_movimento)
        texto_movimento = re.sub('Q U I R O G R A F [ÁA] R I [OA]( S)?', 'QUIROGRAFARIOS', texto_movimento)
        texto_movimento = re.sub('T R A B A L H I S T A( S)?', 'TRABALHISTA', texto_movimento)
        texto_movimento = re.sub('T R I B U T [AÁ] R I O( S)?', 'TRIBUTARIO', texto_movimento)
        texto_movimento = re.sub('P R I V I L E G I A D O( S)?', 'PRIVILEGIADOS', texto_movimento)
        texto_movimento = re.sub('G A R A N T I A (S)? *R E A (L|I ?S)', 'GARANTIA REAL', texto_movimento)
        #casos que dão problema no nome e depois precisam ser limpos
        texto_movimento = re.sub(
            '\s*PUBLICACAO OFI\s?CIAL DO TRIBUNAL DE JUSTICA DO ESTADO DE SAO PAULO[\s-]+LEI\s*O\s*(\d*)?\s*(VALOR)?\s*', '',
            texto_movimento)
        texto_movimento = re.sub('VARA\s*(UNICA)?\s*DO\s*TRABALHO', '', texto_movimento)
        texto_movimento = re.sub('DISTRIBUICAO DISTR AUTOMATICA EM \d+ VA\w*', '', texto_movimento)
        # texto_movimento = re.sub('COM ENDERECO NA.*', '', texto_movimento)
        texto_movimento = re.sub('CREDOR VALOR DO CREDITO', '', texto_movimento)
        texto_movimento = re.sub('RESERVA DE CREDITO', '', texto_movimento)
        texto_movimento = re.sub('\s*(PROC\.)?[\s,]*\\bNO VALOR DE', '', texto_movimento)
        texto_movimento = re.sub('NOME DO CREDOR E VALOR (FINAL )?APURADO PEL[AO] ADMINISTRADORA?\s*JUDICIAL', '',
                                 texto_movimento)
        texto_movimento = re.sub(
            'PROCESSO VARA 2A VARA SP ARACATUBA COMARCA ARACATUBA ASSUNTO EXECUCAO FISCAL PARTES (PROCESSO VARA \w+( VARA)? SP \w+ COMARCA \w+ ASSUNTO (\w+\s+)+PARTES)',
            '', texto_movimento)
        return texto_movimento



    def limpa_texto_diario_para_quadro_credor(self,texto_diario):
        texto = re.sub('PUBLICACAO\s*OFICIAL\s*DO\s*TRIBUNAL\s*DE\s*JUSTICA.{0,50}LEI\s*FEDERAL[\s\,]*(Nº.{0,30})?ART\.\s*[0-9]+.?','', texto_diario)
        texto = re.sub(
            'DISPONIB\w*[\-:]?\s?.{0,15}\s?[,]\s?([0-9]?[0-9])\s?DE\s?.{0,10}\sDE\s[0-9][0-9][0-9][0-9]', '',
            texto)
        texto = re.sub('DIARIO\sD[AE]\sJUSTICA\sELETRONICO\s\-\sCADERNO\sEDITAIS\sE\sLEILOES', '',
                                 texto)
        texto = re.sub('SAO\sPAULO[,]\sANO.{0,20}?\s-\sEDICAO\s\d*(\s\d*)?', '', texto)
        texto = re.sub(
            'ANO.{0,}.EDICAO\s[0-9][0-9][0-9][0-9]\s..{0,15}\s?[,]\s?([0-9][0-9])\s?DE\s?.{0,10}\sDE\s[0-9][0-9][0-9][0-9]',
            '', texto)
        texto = re.sub('CADERNO\s-DE\s+EDITAIS\s+E\s+LEILOES', '', texto)
        texto = re.sub('DIARIO\sOFICIAL\sPODER\sJUDICIARIO\s.\sCADERNO\sDE\sED.*', '', texto)
        texto = re.sub('^\d+$', '', texto)  # número de páginas
        texto = re.sub('\-\sSAO\sPAULO[,].*$', '', texto)  # cabeçalho
        texto = re.sub(
            '\(.{0,10}SENTENÇA PROFERIDA EM [0-9][0-9][\.\/][0-9][0-9][\.\/][0-9][0-9][0-9][0-9]\)', '',
            texto)
        texto = re.sub('VALORES\s*EXPRESSOS\s*EM\s*CR\$', '', texto)
        texto = re.sub('^OBSERVACOES:$', '', texto)
        texto = re.sub('[A-Z]\)\s*O\sPRESENTE\sQUADRO\sGERAL\sDE\sCREDORES\sFOI\sELABORADO\sDE', '',
                                 texto)
        texto = re.sub(
            '^\d\s*\–\s*D\.O\.E\.\;\sPODER\sJUDICIARIO\;\sSAO\sPAULO\,\s[0-9][0-9]\s*\([0-9][0-9][0-9]\).{0,100}CADERNO\sDE\sEDITAIS ',
            '', texto)
        texto = re.sub(
            '(([0-9]?[0-9]?[0-9]\s?)?[–\-—]?\s?(D\.O\.E\.);?\s?(PODER\s?JUDICIARIO;\sSAO PAULO,\s?[0-9]?[0-9]?[0-9]\s\([0-9]?[0-9]?[0-9]\),?\s?.{0,15}\s?[,]\s?([0-9]?[0-9])\s?DE\s?.{0,10}\sDE\s[0-9][0-9][0-9][0-9])\s[–\-—](\sCADERNO\sDE\sEDITAIS)\s?[–\-—]?\s?([0-9]?[0-9]?[0-9]\s?)?)',
            '', texto)
        return texto

